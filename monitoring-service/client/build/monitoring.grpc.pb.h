// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: monitoring.proto
#ifndef GRPC_monitoring_2eproto__INCLUDED
#define GRPC_monitoring_2eproto__INCLUDED

#include "monitoring.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace monitoring {

class MonitoringService final {
 public:
  static constexpr char const* service_full_name() {
    return "monitoring.MonitoringService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Client registers with server and receives a stream of alerts
    std::unique_ptr< ::grpc::ClientReaderInterface< ::monitoring::Alert>> RegisterDevice(::grpc::ClientContext* context, const ::monitoring::DeviceInfo& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::monitoring::Alert>>(RegisterDeviceRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::monitoring::Alert>> AsyncRegisterDevice(::grpc::ClientContext* context, const ::monitoring::DeviceInfo& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::monitoring::Alert>>(AsyncRegisterDeviceRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::monitoring::Alert>> PrepareAsyncRegisterDevice(::grpc::ClientContext* context, const ::monitoring::DeviceInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::monitoring::Alert>>(PrepareAsyncRegisterDeviceRaw(context, request, cq));
    }
    // Client can send status update
    virtual ::grpc::Status SendStatusUpdate(::grpc::ClientContext* context, const ::monitoring::StatusUpdate& request, ::monitoring::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::monitoring::StatusResponse>> AsyncSendStatusUpdate(::grpc::ClientContext* context, const ::monitoring::StatusUpdate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::monitoring::StatusResponse>>(AsyncSendStatusUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::monitoring::StatusResponse>> PrepareAsyncSendStatusUpdate(::grpc::ClientContext* context, const ::monitoring::StatusUpdate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::monitoring::StatusResponse>>(PrepareAsyncSendStatusUpdateRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Client registers with server and receives a stream of alerts
      virtual void RegisterDevice(::grpc::ClientContext* context, const ::monitoring::DeviceInfo* request, ::grpc::ClientReadReactor< ::monitoring::Alert>* reactor) = 0;
      // Client can send status update
      virtual void SendStatusUpdate(::grpc::ClientContext* context, const ::monitoring::StatusUpdate* request, ::monitoring::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendStatusUpdate(::grpc::ClientContext* context, const ::monitoring::StatusUpdate* request, ::monitoring::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::monitoring::Alert>* RegisterDeviceRaw(::grpc::ClientContext* context, const ::monitoring::DeviceInfo& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::monitoring::Alert>* AsyncRegisterDeviceRaw(::grpc::ClientContext* context, const ::monitoring::DeviceInfo& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::monitoring::Alert>* PrepareAsyncRegisterDeviceRaw(::grpc::ClientContext* context, const ::monitoring::DeviceInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::monitoring::StatusResponse>* AsyncSendStatusUpdateRaw(::grpc::ClientContext* context, const ::monitoring::StatusUpdate& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::monitoring::StatusResponse>* PrepareAsyncSendStatusUpdateRaw(::grpc::ClientContext* context, const ::monitoring::StatusUpdate& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::monitoring::Alert>> RegisterDevice(::grpc::ClientContext* context, const ::monitoring::DeviceInfo& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::monitoring::Alert>>(RegisterDeviceRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::monitoring::Alert>> AsyncRegisterDevice(::grpc::ClientContext* context, const ::monitoring::DeviceInfo& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::monitoring::Alert>>(AsyncRegisterDeviceRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::monitoring::Alert>> PrepareAsyncRegisterDevice(::grpc::ClientContext* context, const ::monitoring::DeviceInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::monitoring::Alert>>(PrepareAsyncRegisterDeviceRaw(context, request, cq));
    }
    ::grpc::Status SendStatusUpdate(::grpc::ClientContext* context, const ::monitoring::StatusUpdate& request, ::monitoring::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::monitoring::StatusResponse>> AsyncSendStatusUpdate(::grpc::ClientContext* context, const ::monitoring::StatusUpdate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::monitoring::StatusResponse>>(AsyncSendStatusUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::monitoring::StatusResponse>> PrepareAsyncSendStatusUpdate(::grpc::ClientContext* context, const ::monitoring::StatusUpdate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::monitoring::StatusResponse>>(PrepareAsyncSendStatusUpdateRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void RegisterDevice(::grpc::ClientContext* context, const ::monitoring::DeviceInfo* request, ::grpc::ClientReadReactor< ::monitoring::Alert>* reactor) override;
      void SendStatusUpdate(::grpc::ClientContext* context, const ::monitoring::StatusUpdate* request, ::monitoring::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void SendStatusUpdate(::grpc::ClientContext* context, const ::monitoring::StatusUpdate* request, ::monitoring::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::monitoring::Alert>* RegisterDeviceRaw(::grpc::ClientContext* context, const ::monitoring::DeviceInfo& request) override;
    ::grpc::ClientAsyncReader< ::monitoring::Alert>* AsyncRegisterDeviceRaw(::grpc::ClientContext* context, const ::monitoring::DeviceInfo& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::monitoring::Alert>* PrepareAsyncRegisterDeviceRaw(::grpc::ClientContext* context, const ::monitoring::DeviceInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::monitoring::StatusResponse>* AsyncSendStatusUpdateRaw(::grpc::ClientContext* context, const ::monitoring::StatusUpdate& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::monitoring::StatusResponse>* PrepareAsyncSendStatusUpdateRaw(::grpc::ClientContext* context, const ::monitoring::StatusUpdate& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterDevice_;
    const ::grpc::internal::RpcMethod rpcmethod_SendStatusUpdate_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Client registers with server and receives a stream of alerts
    virtual ::grpc::Status RegisterDevice(::grpc::ServerContext* context, const ::monitoring::DeviceInfo* request, ::grpc::ServerWriter< ::monitoring::Alert>* writer);
    // Client can send status update
    virtual ::grpc::Status SendStatusUpdate(::grpc::ServerContext* context, const ::monitoring::StatusUpdate* request, ::monitoring::StatusResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterDevice() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterDevice(::grpc::ServerContext* /*context*/, const ::monitoring::DeviceInfo* /*request*/, ::grpc::ServerWriter< ::monitoring::Alert>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterDevice(::grpc::ServerContext* context, ::monitoring::DeviceInfo* request, ::grpc::ServerAsyncWriter< ::monitoring::Alert>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendStatusUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendStatusUpdate() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SendStatusUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendStatusUpdate(::grpc::ServerContext* /*context*/, const ::monitoring::StatusUpdate* /*request*/, ::monitoring::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendStatusUpdate(::grpc::ServerContext* context, ::monitoring::StatusUpdate* request, ::grpc::ServerAsyncResponseWriter< ::monitoring::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterDevice<WithAsyncMethod_SendStatusUpdate<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_RegisterDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterDevice() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::monitoring::DeviceInfo, ::monitoring::Alert>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::monitoring::DeviceInfo* request) { return this->RegisterDevice(context, request); }));
    }
    ~WithCallbackMethod_RegisterDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterDevice(::grpc::ServerContext* /*context*/, const ::monitoring::DeviceInfo* /*request*/, ::grpc::ServerWriter< ::monitoring::Alert>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::monitoring::Alert>* RegisterDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::monitoring::DeviceInfo* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendStatusUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendStatusUpdate() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::monitoring::StatusUpdate, ::monitoring::StatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::monitoring::StatusUpdate* request, ::monitoring::StatusResponse* response) { return this->SendStatusUpdate(context, request, response); }));}
    void SetMessageAllocatorFor_SendStatusUpdate(
        ::grpc::MessageAllocator< ::monitoring::StatusUpdate, ::monitoring::StatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::monitoring::StatusUpdate, ::monitoring::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendStatusUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendStatusUpdate(::grpc::ServerContext* /*context*/, const ::monitoring::StatusUpdate* /*request*/, ::monitoring::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendStatusUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::monitoring::StatusUpdate* /*request*/, ::monitoring::StatusResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_RegisterDevice<WithCallbackMethod_SendStatusUpdate<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RegisterDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterDevice() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterDevice(::grpc::ServerContext* /*context*/, const ::monitoring::DeviceInfo* /*request*/, ::grpc::ServerWriter< ::monitoring::Alert>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendStatusUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendStatusUpdate() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SendStatusUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendStatusUpdate(::grpc::ServerContext* /*context*/, const ::monitoring::StatusUpdate* /*request*/, ::monitoring::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterDevice() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RegisterDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterDevice(::grpc::ServerContext* /*context*/, const ::monitoring::DeviceInfo* /*request*/, ::grpc::ServerWriter< ::monitoring::Alert>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterDevice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendStatusUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendStatusUpdate() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SendStatusUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendStatusUpdate(::grpc::ServerContext* /*context*/, const ::monitoring::StatusUpdate* /*request*/, ::monitoring::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendStatusUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterDevice() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->RegisterDevice(context, request); }));
    }
    ~WithRawCallbackMethod_RegisterDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterDevice(::grpc::ServerContext* /*context*/, const ::monitoring::DeviceInfo* /*request*/, ::grpc::ServerWriter< ::monitoring::Alert>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* RegisterDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendStatusUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendStatusUpdate() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendStatusUpdate(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendStatusUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendStatusUpdate(::grpc::ServerContext* /*context*/, const ::monitoring::StatusUpdate* /*request*/, ::monitoring::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendStatusUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendStatusUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendStatusUpdate() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::monitoring::StatusUpdate, ::monitoring::StatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::monitoring::StatusUpdate, ::monitoring::StatusResponse>* streamer) {
                       return this->StreamedSendStatusUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendStatusUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendStatusUpdate(::grpc::ServerContext* /*context*/, const ::monitoring::StatusUpdate* /*request*/, ::monitoring::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendStatusUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::monitoring::StatusUpdate,::monitoring::StatusResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendStatusUpdate<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_RegisterDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_RegisterDevice() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::monitoring::DeviceInfo, ::monitoring::Alert>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::monitoring::DeviceInfo, ::monitoring::Alert>* streamer) {
                       return this->StreamedRegisterDevice(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_RegisterDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterDevice(::grpc::ServerContext* /*context*/, const ::monitoring::DeviceInfo* /*request*/, ::grpc::ServerWriter< ::monitoring::Alert>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedRegisterDevice(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::monitoring::DeviceInfo,::monitoring::Alert>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_RegisterDevice<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_RegisterDevice<WithStreamedUnaryMethod_SendStatusUpdate<Service > > StreamedService;
};

}  // namespace monitoring


#endif  // GRPC_monitoring_2eproto__INCLUDED
