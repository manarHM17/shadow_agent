// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monitoring.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_monitoring_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_monitoring_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_monitoring_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_monitoring_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_monitoring_2eproto;
namespace monitoring {
class DeviceID;
struct DeviceIDDefaultTypeInternal;
extern DeviceIDDefaultTypeInternal _DeviceID_default_instance_;
class MonitoringResponse;
struct MonitoringResponseDefaultTypeInternal;
extern MonitoringResponseDefaultTypeInternal _MonitoringResponse_default_instance_;
}  // namespace monitoring
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace monitoring {

// ===================================================================


// -------------------------------------------------------------------

class MonitoringResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:monitoring.MonitoringResponse) */ {
 public:
  inline MonitoringResponse() : MonitoringResponse(nullptr) {}
  ~MonitoringResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MonitoringResponse(::google::protobuf::internal::ConstantInitialized);

  inline MonitoringResponse(const MonitoringResponse& from)
      : MonitoringResponse(nullptr, from) {}
  MonitoringResponse(MonitoringResponse&& from) noexcept
    : MonitoringResponse() {
    *this = ::std::move(from);
  }

  inline MonitoringResponse& operator=(const MonitoringResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitoringResponse& operator=(MonitoringResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonitoringResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonitoringResponse* internal_default_instance() {
    return reinterpret_cast<const MonitoringResponse*>(
               &_MonitoringResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MonitoringResponse& a, MonitoringResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitoringResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonitoringResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MonitoringResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MonitoringResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MonitoringResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MonitoringResponse& from) {
    MonitoringResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MonitoringResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "monitoring.MonitoringResponse";
  }
  protected:
  explicit MonitoringResponse(::google::protobuf::Arena* arena);
  MonitoringResponse(::google::protobuf::Arena* arena, const MonitoringResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlertMessageFieldNumber = 1,
    kAlertLevelFieldNumber = 2,
    kRecommendedActionFieldNumber = 3,
    kTimestampFieldNumber = 4,
  };
  // string alert_message = 1;
  void clear_alert_message() ;
  const std::string& alert_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_alert_message(Arg_&& arg, Args_... args);
  std::string* mutable_alert_message();
  PROTOBUF_NODISCARD std::string* release_alert_message();
  void set_allocated_alert_message(std::string* value);

  private:
  const std::string& _internal_alert_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alert_message(
      const std::string& value);
  std::string* _internal_mutable_alert_message();

  public:
  // string alert_level = 2;
  void clear_alert_level() ;
  const std::string& alert_level() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_alert_level(Arg_&& arg, Args_... args);
  std::string* mutable_alert_level();
  PROTOBUF_NODISCARD std::string* release_alert_level();
  void set_allocated_alert_level(std::string* value);

  private:
  const std::string& _internal_alert_level() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alert_level(
      const std::string& value);
  std::string* _internal_mutable_alert_level();

  public:
  // string recommended_action = 3;
  void clear_recommended_action() ;
  const std::string& recommended_action() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_recommended_action(Arg_&& arg, Args_... args);
  std::string* mutable_recommended_action();
  PROTOBUF_NODISCARD std::string* release_recommended_action();
  void set_allocated_recommended_action(std::string* value);

  private:
  const std::string& _internal_recommended_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recommended_action(
      const std::string& value);
  std::string* _internal_mutable_recommended_action();

  public:
  // string timestamp = 4;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // @@protoc_insertion_point(class_scope:monitoring.MonitoringResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      89, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr alert_message_;
    ::google::protobuf::internal::ArenaStringPtr alert_level_;
    ::google::protobuf::internal::ArenaStringPtr recommended_action_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_monitoring_2eproto;
};// -------------------------------------------------------------------

class DeviceID final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:monitoring.DeviceID) */ {
 public:
  inline DeviceID() : DeviceID(nullptr) {}
  ~DeviceID() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceID(::google::protobuf::internal::ConstantInitialized);

  inline DeviceID(const DeviceID& from)
      : DeviceID(nullptr, from) {}
  DeviceID(DeviceID&& from) noexcept
    : DeviceID() {
    *this = ::std::move(from);
  }

  inline DeviceID& operator=(const DeviceID& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceID& operator=(DeviceID&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceID& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceID* internal_default_instance() {
    return reinterpret_cast<const DeviceID*>(
               &_DeviceID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DeviceID& a, DeviceID& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceID* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceID* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceID>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceID& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeviceID& from) {
    DeviceID::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceID* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "monitoring.DeviceID";
  }
  protected:
  explicit DeviceID(::google::protobuf::Arena* arena);
  DeviceID(::google::protobuf::Arena* arena, const DeviceID& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
  };
  // int32 device_id = 1;
  void clear_device_id() ;
  ::int32_t device_id() const;
  void set_device_id(::int32_t value);

  private:
  ::int32_t _internal_device_id() const;
  void _internal_set_device_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:monitoring.DeviceID)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t device_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_monitoring_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DeviceID

// int32 device_id = 1;
inline void DeviceID::clear_device_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.device_id_ = 0;
}
inline ::int32_t DeviceID::device_id() const {
  // @@protoc_insertion_point(field_get:monitoring.DeviceID.device_id)
  return _internal_device_id();
}
inline void DeviceID::set_device_id(::int32_t value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:monitoring.DeviceID.device_id)
}
inline ::int32_t DeviceID::_internal_device_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.device_id_;
}
inline void DeviceID::_internal_set_device_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.device_id_ = value;
}

// -------------------------------------------------------------------

// MonitoringResponse

// string alert_message = 1;
inline void MonitoringResponse::clear_alert_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.alert_message_.ClearToEmpty();
}
inline const std::string& MonitoringResponse::alert_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:monitoring.MonitoringResponse.alert_message)
  return _internal_alert_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MonitoringResponse::set_alert_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.alert_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:monitoring.MonitoringResponse.alert_message)
}
inline std::string* MonitoringResponse::mutable_alert_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_alert_message();
  // @@protoc_insertion_point(field_mutable:monitoring.MonitoringResponse.alert_message)
  return _s;
}
inline const std::string& MonitoringResponse::_internal_alert_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.alert_message_.Get();
}
inline void MonitoringResponse::_internal_set_alert_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.alert_message_.Set(value, GetArena());
}
inline std::string* MonitoringResponse::_internal_mutable_alert_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.alert_message_.Mutable( GetArena());
}
inline std::string* MonitoringResponse::release_alert_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:monitoring.MonitoringResponse.alert_message)
  return _impl_.alert_message_.Release();
}
inline void MonitoringResponse::set_allocated_alert_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.alert_message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.alert_message_.IsDefault()) {
          _impl_.alert_message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:monitoring.MonitoringResponse.alert_message)
}

// string alert_level = 2;
inline void MonitoringResponse::clear_alert_level() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.alert_level_.ClearToEmpty();
}
inline const std::string& MonitoringResponse::alert_level() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:monitoring.MonitoringResponse.alert_level)
  return _internal_alert_level();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MonitoringResponse::set_alert_level(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.alert_level_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:monitoring.MonitoringResponse.alert_level)
}
inline std::string* MonitoringResponse::mutable_alert_level() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_alert_level();
  // @@protoc_insertion_point(field_mutable:monitoring.MonitoringResponse.alert_level)
  return _s;
}
inline const std::string& MonitoringResponse::_internal_alert_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.alert_level_.Get();
}
inline void MonitoringResponse::_internal_set_alert_level(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.alert_level_.Set(value, GetArena());
}
inline std::string* MonitoringResponse::_internal_mutable_alert_level() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.alert_level_.Mutable( GetArena());
}
inline std::string* MonitoringResponse::release_alert_level() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:monitoring.MonitoringResponse.alert_level)
  return _impl_.alert_level_.Release();
}
inline void MonitoringResponse::set_allocated_alert_level(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.alert_level_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.alert_level_.IsDefault()) {
          _impl_.alert_level_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:monitoring.MonitoringResponse.alert_level)
}

// string recommended_action = 3;
inline void MonitoringResponse::clear_recommended_action() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.recommended_action_.ClearToEmpty();
}
inline const std::string& MonitoringResponse::recommended_action() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:monitoring.MonitoringResponse.recommended_action)
  return _internal_recommended_action();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MonitoringResponse::set_recommended_action(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.recommended_action_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:monitoring.MonitoringResponse.recommended_action)
}
inline std::string* MonitoringResponse::mutable_recommended_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_recommended_action();
  // @@protoc_insertion_point(field_mutable:monitoring.MonitoringResponse.recommended_action)
  return _s;
}
inline const std::string& MonitoringResponse::_internal_recommended_action() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.recommended_action_.Get();
}
inline void MonitoringResponse::_internal_set_recommended_action(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.recommended_action_.Set(value, GetArena());
}
inline std::string* MonitoringResponse::_internal_mutable_recommended_action() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.recommended_action_.Mutable( GetArena());
}
inline std::string* MonitoringResponse::release_recommended_action() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:monitoring.MonitoringResponse.recommended_action)
  return _impl_.recommended_action_.Release();
}
inline void MonitoringResponse::set_allocated_recommended_action(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.recommended_action_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.recommended_action_.IsDefault()) {
          _impl_.recommended_action_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:monitoring.MonitoringResponse.recommended_action)
}

// string timestamp = 4;
inline void MonitoringResponse::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& MonitoringResponse::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:monitoring.MonitoringResponse.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MonitoringResponse::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:monitoring.MonitoringResponse.timestamp)
}
inline std::string* MonitoringResponse::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:monitoring.MonitoringResponse.timestamp)
  return _s;
}
inline const std::string& MonitoringResponse::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timestamp_.Get();
}
inline void MonitoringResponse::_internal_set_timestamp(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* MonitoringResponse::_internal_mutable_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* MonitoringResponse::release_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:monitoring.MonitoringResponse.timestamp)
  return _impl_.timestamp_.Release();
}
inline void MonitoringResponse::set_allocated_timestamp(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.timestamp_.IsDefault()) {
          _impl_.timestamp_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:monitoring.MonitoringResponse.timestamp)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace monitoring


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_monitoring_2eproto_2epb_2eh
