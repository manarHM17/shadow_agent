// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: provisioning.proto

#include "provisioning.pb.h"
#include "provisioning.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace provisioning {

static const char* ProvisioningService_method_names[] = {
  "/provisioning.ProvisioningService/Authenticate",
  "/provisioning.ProvisioningService/AddDevice",
  "/provisioning.ProvisioningService/DeleteDevice",
  "/provisioning.ProvisioningService/UpdateDevice",
  "/provisioning.ProvisioningService/GetAllDevices",
  "/provisioning.ProvisioningService/GetDeviceById",
};

std::unique_ptr< ProvisioningService::Stub> ProvisioningService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ProvisioningService::Stub> stub(new ProvisioningService::Stub(channel, options));
  return stub;
}

ProvisioningService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Authenticate_(ProvisioningService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddDevice_(ProvisioningService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteDevice_(ProvisioningService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateDevice_(ProvisioningService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllDevices_(ProvisioningService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDeviceById_(ProvisioningService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ProvisioningService::Stub::Authenticate(::grpc::ClientContext* context, const ::provisioning::AuthRequest& request, ::provisioning::AuthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::provisioning::AuthRequest, ::provisioning::AuthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Authenticate_, context, request, response);
}

void ProvisioningService::Stub::async::Authenticate(::grpc::ClientContext* context, const ::provisioning::AuthRequest* request, ::provisioning::AuthResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::provisioning::AuthRequest, ::provisioning::AuthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Authenticate_, context, request, response, std::move(f));
}

void ProvisioningService::Stub::async::Authenticate(::grpc::ClientContext* context, const ::provisioning::AuthRequest* request, ::provisioning::AuthResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Authenticate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::provisioning::AuthResponse>* ProvisioningService::Stub::PrepareAsyncAuthenticateRaw(::grpc::ClientContext* context, const ::provisioning::AuthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::provisioning::AuthResponse, ::provisioning::AuthRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Authenticate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::provisioning::AuthResponse>* ProvisioningService::Stub::AsyncAuthenticateRaw(::grpc::ClientContext* context, const ::provisioning::AuthRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAuthenticateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProvisioningService::Stub::AddDevice(::grpc::ClientContext* context, const ::provisioning::AddDeviceRequest& request, ::provisioning::AddDeviceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::provisioning::AddDeviceRequest, ::provisioning::AddDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddDevice_, context, request, response);
}

void ProvisioningService::Stub::async::AddDevice(::grpc::ClientContext* context, const ::provisioning::AddDeviceRequest* request, ::provisioning::AddDeviceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::provisioning::AddDeviceRequest, ::provisioning::AddDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddDevice_, context, request, response, std::move(f));
}

void ProvisioningService::Stub::async::AddDevice(::grpc::ClientContext* context, const ::provisioning::AddDeviceRequest* request, ::provisioning::AddDeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::provisioning::AddDeviceResponse>* ProvisioningService::Stub::PrepareAsyncAddDeviceRaw(::grpc::ClientContext* context, const ::provisioning::AddDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::provisioning::AddDeviceResponse, ::provisioning::AddDeviceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::provisioning::AddDeviceResponse>* ProvisioningService::Stub::AsyncAddDeviceRaw(::grpc::ClientContext* context, const ::provisioning::AddDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProvisioningService::Stub::DeleteDevice(::grpc::ClientContext* context, const ::provisioning::DeleteDeviceRequest& request, ::provisioning::DeleteDeviceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::provisioning::DeleteDeviceRequest, ::provisioning::DeleteDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteDevice_, context, request, response);
}

void ProvisioningService::Stub::async::DeleteDevice(::grpc::ClientContext* context, const ::provisioning::DeleteDeviceRequest* request, ::provisioning::DeleteDeviceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::provisioning::DeleteDeviceRequest, ::provisioning::DeleteDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteDevice_, context, request, response, std::move(f));
}

void ProvisioningService::Stub::async::DeleteDevice(::grpc::ClientContext* context, const ::provisioning::DeleteDeviceRequest* request, ::provisioning::DeleteDeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::provisioning::DeleteDeviceResponse>* ProvisioningService::Stub::PrepareAsyncDeleteDeviceRaw(::grpc::ClientContext* context, const ::provisioning::DeleteDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::provisioning::DeleteDeviceResponse, ::provisioning::DeleteDeviceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::provisioning::DeleteDeviceResponse>* ProvisioningService::Stub::AsyncDeleteDeviceRaw(::grpc::ClientContext* context, const ::provisioning::DeleteDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProvisioningService::Stub::UpdateDevice(::grpc::ClientContext* context, const ::provisioning::UpdateDeviceRequest& request, ::provisioning::UpdateDeviceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::provisioning::UpdateDeviceRequest, ::provisioning::UpdateDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateDevice_, context, request, response);
}

void ProvisioningService::Stub::async::UpdateDevice(::grpc::ClientContext* context, const ::provisioning::UpdateDeviceRequest* request, ::provisioning::UpdateDeviceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::provisioning::UpdateDeviceRequest, ::provisioning::UpdateDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateDevice_, context, request, response, std::move(f));
}

void ProvisioningService::Stub::async::UpdateDevice(::grpc::ClientContext* context, const ::provisioning::UpdateDeviceRequest* request, ::provisioning::UpdateDeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::provisioning::UpdateDeviceResponse>* ProvisioningService::Stub::PrepareAsyncUpdateDeviceRaw(::grpc::ClientContext* context, const ::provisioning::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::provisioning::UpdateDeviceResponse, ::provisioning::UpdateDeviceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::provisioning::UpdateDeviceResponse>* ProvisioningService::Stub::AsyncUpdateDeviceRaw(::grpc::ClientContext* context, const ::provisioning::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProvisioningService::Stub::GetAllDevices(::grpc::ClientContext* context, const ::provisioning::GetDevicesRequest& request, ::provisioning::GetDevicesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::provisioning::GetDevicesRequest, ::provisioning::GetDevicesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAllDevices_, context, request, response);
}

void ProvisioningService::Stub::async::GetAllDevices(::grpc::ClientContext* context, const ::provisioning::GetDevicesRequest* request, ::provisioning::GetDevicesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::provisioning::GetDevicesRequest, ::provisioning::GetDevicesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllDevices_, context, request, response, std::move(f));
}

void ProvisioningService::Stub::async::GetAllDevices(::grpc::ClientContext* context, const ::provisioning::GetDevicesRequest* request, ::provisioning::GetDevicesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllDevices_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::provisioning::GetDevicesResponse>* ProvisioningService::Stub::PrepareAsyncGetAllDevicesRaw(::grpc::ClientContext* context, const ::provisioning::GetDevicesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::provisioning::GetDevicesResponse, ::provisioning::GetDevicesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAllDevices_, context, request);
}

::grpc::ClientAsyncResponseReader< ::provisioning::GetDevicesResponse>* ProvisioningService::Stub::AsyncGetAllDevicesRaw(::grpc::ClientContext* context, const ::provisioning::GetDevicesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllDevicesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProvisioningService::Stub::GetDeviceById(::grpc::ClientContext* context, const ::provisioning::GetDeviceByIdRequest& request, ::provisioning::GetDeviceByIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::provisioning::GetDeviceByIdRequest, ::provisioning::GetDeviceByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDeviceById_, context, request, response);
}

void ProvisioningService::Stub::async::GetDeviceById(::grpc::ClientContext* context, const ::provisioning::GetDeviceByIdRequest* request, ::provisioning::GetDeviceByIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::provisioning::GetDeviceByIdRequest, ::provisioning::GetDeviceByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceById_, context, request, response, std::move(f));
}

void ProvisioningService::Stub::async::GetDeviceById(::grpc::ClientContext* context, const ::provisioning::GetDeviceByIdRequest* request, ::provisioning::GetDeviceByIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::provisioning::GetDeviceByIdResponse>* ProvisioningService::Stub::PrepareAsyncGetDeviceByIdRaw(::grpc::ClientContext* context, const ::provisioning::GetDeviceByIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::provisioning::GetDeviceByIdResponse, ::provisioning::GetDeviceByIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDeviceById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::provisioning::GetDeviceByIdResponse>* ProvisioningService::Stub::AsyncGetDeviceByIdRaw(::grpc::ClientContext* context, const ::provisioning::GetDeviceByIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDeviceByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

ProvisioningService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProvisioningService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProvisioningService::Service, ::provisioning::AuthRequest, ::provisioning::AuthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProvisioningService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::provisioning::AuthRequest* req,
             ::provisioning::AuthResponse* resp) {
               return service->Authenticate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProvisioningService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProvisioningService::Service, ::provisioning::AddDeviceRequest, ::provisioning::AddDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProvisioningService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::provisioning::AddDeviceRequest* req,
             ::provisioning::AddDeviceResponse* resp) {
               return service->AddDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProvisioningService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProvisioningService::Service, ::provisioning::DeleteDeviceRequest, ::provisioning::DeleteDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProvisioningService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::provisioning::DeleteDeviceRequest* req,
             ::provisioning::DeleteDeviceResponse* resp) {
               return service->DeleteDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProvisioningService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProvisioningService::Service, ::provisioning::UpdateDeviceRequest, ::provisioning::UpdateDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProvisioningService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::provisioning::UpdateDeviceRequest* req,
             ::provisioning::UpdateDeviceResponse* resp) {
               return service->UpdateDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProvisioningService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProvisioningService::Service, ::provisioning::GetDevicesRequest, ::provisioning::GetDevicesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProvisioningService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::provisioning::GetDevicesRequest* req,
             ::provisioning::GetDevicesResponse* resp) {
               return service->GetAllDevices(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProvisioningService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProvisioningService::Service, ::provisioning::GetDeviceByIdRequest, ::provisioning::GetDeviceByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProvisioningService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::provisioning::GetDeviceByIdRequest* req,
             ::provisioning::GetDeviceByIdResponse* resp) {
               return service->GetDeviceById(ctx, req, resp);
             }, this)));
}

ProvisioningService::Service::~Service() {
}

::grpc::Status ProvisioningService::Service::Authenticate(::grpc::ServerContext* context, const ::provisioning::AuthRequest* request, ::provisioning::AuthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProvisioningService::Service::AddDevice(::grpc::ServerContext* context, const ::provisioning::AddDeviceRequest* request, ::provisioning::AddDeviceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProvisioningService::Service::DeleteDevice(::grpc::ServerContext* context, const ::provisioning::DeleteDeviceRequest* request, ::provisioning::DeleteDeviceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProvisioningService::Service::UpdateDevice(::grpc::ServerContext* context, const ::provisioning::UpdateDeviceRequest* request, ::provisioning::UpdateDeviceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProvisioningService::Service::GetAllDevices(::grpc::ServerContext* context, const ::provisioning::GetDevicesRequest* request, ::provisioning::GetDevicesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProvisioningService::Service::GetDeviceById(::grpc::ServerContext* context, const ::provisioning::GetDeviceByIdRequest* request, ::provisioning::GetDeviceByIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace provisioning

