// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: provisioning.proto
// Original file comments:
// proto/src/provisioning.proto
#ifndef GRPC_provisioning_2eproto__INCLUDED
#define GRPC_provisioning_2eproto__INCLUDED

#include "provisioning.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace provisioning {

class ProvisioningService final {
 public:
  static constexpr char const* service_full_name() {
    return "provisioning.ProvisioningService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Authenticate(::grpc::ClientContext* context, const ::provisioning::AuthRequest& request, ::provisioning::AuthResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::AuthResponse>> AsyncAuthenticate(::grpc::ClientContext* context, const ::provisioning::AuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::AuthResponse>>(AsyncAuthenticateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::AuthResponse>> PrepareAsyncAuthenticate(::grpc::ClientContext* context, const ::provisioning::AuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::AuthResponse>>(PrepareAsyncAuthenticateRaw(context, request, cq));
    }
    virtual ::grpc::Status AddDevice(::grpc::ClientContext* context, const ::provisioning::AddDeviceRequest& request, ::provisioning::AddDeviceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::AddDeviceResponse>> AsyncAddDevice(::grpc::ClientContext* context, const ::provisioning::AddDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::AddDeviceResponse>>(AsyncAddDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::AddDeviceResponse>> PrepareAsyncAddDevice(::grpc::ClientContext* context, const ::provisioning::AddDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::AddDeviceResponse>>(PrepareAsyncAddDeviceRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteDevice(::grpc::ClientContext* context, const ::provisioning::DeleteDeviceRequest& request, ::provisioning::DeleteDeviceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::DeleteDeviceResponse>> AsyncDeleteDevice(::grpc::ClientContext* context, const ::provisioning::DeleteDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::DeleteDeviceResponse>>(AsyncDeleteDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::DeleteDeviceResponse>> PrepareAsyncDeleteDevice(::grpc::ClientContext* context, const ::provisioning::DeleteDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::DeleteDeviceResponse>>(PrepareAsyncDeleteDeviceRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateDevice(::grpc::ClientContext* context, const ::provisioning::UpdateDeviceRequest& request, ::provisioning::UpdateDeviceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::UpdateDeviceResponse>> AsyncUpdateDevice(::grpc::ClientContext* context, const ::provisioning::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::UpdateDeviceResponse>>(AsyncUpdateDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::UpdateDeviceResponse>> PrepareAsyncUpdateDevice(::grpc::ClientContext* context, const ::provisioning::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::UpdateDeviceResponse>>(PrepareAsyncUpdateDeviceRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAllDevices(::grpc::ClientContext* context, const ::provisioning::GetDevicesRequest& request, ::provisioning::GetDevicesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::GetDevicesResponse>> AsyncGetAllDevices(::grpc::ClientContext* context, const ::provisioning::GetDevicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::GetDevicesResponse>>(AsyncGetAllDevicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::GetDevicesResponse>> PrepareAsyncGetAllDevices(::grpc::ClientContext* context, const ::provisioning::GetDevicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::GetDevicesResponse>>(PrepareAsyncGetAllDevicesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetDeviceById(::grpc::ClientContext* context, const ::provisioning::GetDeviceByIdRequest& request, ::provisioning::GetDeviceByIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::GetDeviceByIdResponse>> AsyncGetDeviceById(::grpc::ClientContext* context, const ::provisioning::GetDeviceByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::GetDeviceByIdResponse>>(AsyncGetDeviceByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::GetDeviceByIdResponse>> PrepareAsyncGetDeviceById(::grpc::ClientContext* context, const ::provisioning::GetDeviceByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::GetDeviceByIdResponse>>(PrepareAsyncGetDeviceByIdRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Authenticate(::grpc::ClientContext* context, const ::provisioning::AuthRequest* request, ::provisioning::AuthResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Authenticate(::grpc::ClientContext* context, const ::provisioning::AuthRequest* request, ::provisioning::AuthResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AddDevice(::grpc::ClientContext* context, const ::provisioning::AddDeviceRequest* request, ::provisioning::AddDeviceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddDevice(::grpc::ClientContext* context, const ::provisioning::AddDeviceRequest* request, ::provisioning::AddDeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteDevice(::grpc::ClientContext* context, const ::provisioning::DeleteDeviceRequest* request, ::provisioning::DeleteDeviceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteDevice(::grpc::ClientContext* context, const ::provisioning::DeleteDeviceRequest* request, ::provisioning::DeleteDeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateDevice(::grpc::ClientContext* context, const ::provisioning::UpdateDeviceRequest* request, ::provisioning::UpdateDeviceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateDevice(::grpc::ClientContext* context, const ::provisioning::UpdateDeviceRequest* request, ::provisioning::UpdateDeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAllDevices(::grpc::ClientContext* context, const ::provisioning::GetDevicesRequest* request, ::provisioning::GetDevicesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllDevices(::grpc::ClientContext* context, const ::provisioning::GetDevicesRequest* request, ::provisioning::GetDevicesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetDeviceById(::grpc::ClientContext* context, const ::provisioning::GetDeviceByIdRequest* request, ::provisioning::GetDeviceByIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDeviceById(::grpc::ClientContext* context, const ::provisioning::GetDeviceByIdRequest* request, ::provisioning::GetDeviceByIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::AuthResponse>* AsyncAuthenticateRaw(::grpc::ClientContext* context, const ::provisioning::AuthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::AuthResponse>* PrepareAsyncAuthenticateRaw(::grpc::ClientContext* context, const ::provisioning::AuthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::AddDeviceResponse>* AsyncAddDeviceRaw(::grpc::ClientContext* context, const ::provisioning::AddDeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::AddDeviceResponse>* PrepareAsyncAddDeviceRaw(::grpc::ClientContext* context, const ::provisioning::AddDeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::DeleteDeviceResponse>* AsyncDeleteDeviceRaw(::grpc::ClientContext* context, const ::provisioning::DeleteDeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::DeleteDeviceResponse>* PrepareAsyncDeleteDeviceRaw(::grpc::ClientContext* context, const ::provisioning::DeleteDeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::UpdateDeviceResponse>* AsyncUpdateDeviceRaw(::grpc::ClientContext* context, const ::provisioning::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::UpdateDeviceResponse>* PrepareAsyncUpdateDeviceRaw(::grpc::ClientContext* context, const ::provisioning::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::GetDevicesResponse>* AsyncGetAllDevicesRaw(::grpc::ClientContext* context, const ::provisioning::GetDevicesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::GetDevicesResponse>* PrepareAsyncGetAllDevicesRaw(::grpc::ClientContext* context, const ::provisioning::GetDevicesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::GetDeviceByIdResponse>* AsyncGetDeviceByIdRaw(::grpc::ClientContext* context, const ::provisioning::GetDeviceByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::provisioning::GetDeviceByIdResponse>* PrepareAsyncGetDeviceByIdRaw(::grpc::ClientContext* context, const ::provisioning::GetDeviceByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Authenticate(::grpc::ClientContext* context, const ::provisioning::AuthRequest& request, ::provisioning::AuthResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::provisioning::AuthResponse>> AsyncAuthenticate(::grpc::ClientContext* context, const ::provisioning::AuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::provisioning::AuthResponse>>(AsyncAuthenticateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::provisioning::AuthResponse>> PrepareAsyncAuthenticate(::grpc::ClientContext* context, const ::provisioning::AuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::provisioning::AuthResponse>>(PrepareAsyncAuthenticateRaw(context, request, cq));
    }
    ::grpc::Status AddDevice(::grpc::ClientContext* context, const ::provisioning::AddDeviceRequest& request, ::provisioning::AddDeviceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::provisioning::AddDeviceResponse>> AsyncAddDevice(::grpc::ClientContext* context, const ::provisioning::AddDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::provisioning::AddDeviceResponse>>(AsyncAddDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::provisioning::AddDeviceResponse>> PrepareAsyncAddDevice(::grpc::ClientContext* context, const ::provisioning::AddDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::provisioning::AddDeviceResponse>>(PrepareAsyncAddDeviceRaw(context, request, cq));
    }
    ::grpc::Status DeleteDevice(::grpc::ClientContext* context, const ::provisioning::DeleteDeviceRequest& request, ::provisioning::DeleteDeviceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::provisioning::DeleteDeviceResponse>> AsyncDeleteDevice(::grpc::ClientContext* context, const ::provisioning::DeleteDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::provisioning::DeleteDeviceResponse>>(AsyncDeleteDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::provisioning::DeleteDeviceResponse>> PrepareAsyncDeleteDevice(::grpc::ClientContext* context, const ::provisioning::DeleteDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::provisioning::DeleteDeviceResponse>>(PrepareAsyncDeleteDeviceRaw(context, request, cq));
    }
    ::grpc::Status UpdateDevice(::grpc::ClientContext* context, const ::provisioning::UpdateDeviceRequest& request, ::provisioning::UpdateDeviceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::provisioning::UpdateDeviceResponse>> AsyncUpdateDevice(::grpc::ClientContext* context, const ::provisioning::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::provisioning::UpdateDeviceResponse>>(AsyncUpdateDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::provisioning::UpdateDeviceResponse>> PrepareAsyncUpdateDevice(::grpc::ClientContext* context, const ::provisioning::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::provisioning::UpdateDeviceResponse>>(PrepareAsyncUpdateDeviceRaw(context, request, cq));
    }
    ::grpc::Status GetAllDevices(::grpc::ClientContext* context, const ::provisioning::GetDevicesRequest& request, ::provisioning::GetDevicesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::provisioning::GetDevicesResponse>> AsyncGetAllDevices(::grpc::ClientContext* context, const ::provisioning::GetDevicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::provisioning::GetDevicesResponse>>(AsyncGetAllDevicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::provisioning::GetDevicesResponse>> PrepareAsyncGetAllDevices(::grpc::ClientContext* context, const ::provisioning::GetDevicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::provisioning::GetDevicesResponse>>(PrepareAsyncGetAllDevicesRaw(context, request, cq));
    }
    ::grpc::Status GetDeviceById(::grpc::ClientContext* context, const ::provisioning::GetDeviceByIdRequest& request, ::provisioning::GetDeviceByIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::provisioning::GetDeviceByIdResponse>> AsyncGetDeviceById(::grpc::ClientContext* context, const ::provisioning::GetDeviceByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::provisioning::GetDeviceByIdResponse>>(AsyncGetDeviceByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::provisioning::GetDeviceByIdResponse>> PrepareAsyncGetDeviceById(::grpc::ClientContext* context, const ::provisioning::GetDeviceByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::provisioning::GetDeviceByIdResponse>>(PrepareAsyncGetDeviceByIdRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Authenticate(::grpc::ClientContext* context, const ::provisioning::AuthRequest* request, ::provisioning::AuthResponse* response, std::function<void(::grpc::Status)>) override;
      void Authenticate(::grpc::ClientContext* context, const ::provisioning::AuthRequest* request, ::provisioning::AuthResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddDevice(::grpc::ClientContext* context, const ::provisioning::AddDeviceRequest* request, ::provisioning::AddDeviceResponse* response, std::function<void(::grpc::Status)>) override;
      void AddDevice(::grpc::ClientContext* context, const ::provisioning::AddDeviceRequest* request, ::provisioning::AddDeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteDevice(::grpc::ClientContext* context, const ::provisioning::DeleteDeviceRequest* request, ::provisioning::DeleteDeviceResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteDevice(::grpc::ClientContext* context, const ::provisioning::DeleteDeviceRequest* request, ::provisioning::DeleteDeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateDevice(::grpc::ClientContext* context, const ::provisioning::UpdateDeviceRequest* request, ::provisioning::UpdateDeviceResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateDevice(::grpc::ClientContext* context, const ::provisioning::UpdateDeviceRequest* request, ::provisioning::UpdateDeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAllDevices(::grpc::ClientContext* context, const ::provisioning::GetDevicesRequest* request, ::provisioning::GetDevicesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAllDevices(::grpc::ClientContext* context, const ::provisioning::GetDevicesRequest* request, ::provisioning::GetDevicesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDeviceById(::grpc::ClientContext* context, const ::provisioning::GetDeviceByIdRequest* request, ::provisioning::GetDeviceByIdResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDeviceById(::grpc::ClientContext* context, const ::provisioning::GetDeviceByIdRequest* request, ::provisioning::GetDeviceByIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::provisioning::AuthResponse>* AsyncAuthenticateRaw(::grpc::ClientContext* context, const ::provisioning::AuthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::provisioning::AuthResponse>* PrepareAsyncAuthenticateRaw(::grpc::ClientContext* context, const ::provisioning::AuthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::provisioning::AddDeviceResponse>* AsyncAddDeviceRaw(::grpc::ClientContext* context, const ::provisioning::AddDeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::provisioning::AddDeviceResponse>* PrepareAsyncAddDeviceRaw(::grpc::ClientContext* context, const ::provisioning::AddDeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::provisioning::DeleteDeviceResponse>* AsyncDeleteDeviceRaw(::grpc::ClientContext* context, const ::provisioning::DeleteDeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::provisioning::DeleteDeviceResponse>* PrepareAsyncDeleteDeviceRaw(::grpc::ClientContext* context, const ::provisioning::DeleteDeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::provisioning::UpdateDeviceResponse>* AsyncUpdateDeviceRaw(::grpc::ClientContext* context, const ::provisioning::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::provisioning::UpdateDeviceResponse>* PrepareAsyncUpdateDeviceRaw(::grpc::ClientContext* context, const ::provisioning::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::provisioning::GetDevicesResponse>* AsyncGetAllDevicesRaw(::grpc::ClientContext* context, const ::provisioning::GetDevicesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::provisioning::GetDevicesResponse>* PrepareAsyncGetAllDevicesRaw(::grpc::ClientContext* context, const ::provisioning::GetDevicesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::provisioning::GetDeviceByIdResponse>* AsyncGetDeviceByIdRaw(::grpc::ClientContext* context, const ::provisioning::GetDeviceByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::provisioning::GetDeviceByIdResponse>* PrepareAsyncGetDeviceByIdRaw(::grpc::ClientContext* context, const ::provisioning::GetDeviceByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Authenticate_;
    const ::grpc::internal::RpcMethod rpcmethod_AddDevice_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteDevice_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateDevice_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllDevices_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDeviceById_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Authenticate(::grpc::ServerContext* context, const ::provisioning::AuthRequest* request, ::provisioning::AuthResponse* response);
    virtual ::grpc::Status AddDevice(::grpc::ServerContext* context, const ::provisioning::AddDeviceRequest* request, ::provisioning::AddDeviceResponse* response);
    virtual ::grpc::Status DeleteDevice(::grpc::ServerContext* context, const ::provisioning::DeleteDeviceRequest* request, ::provisioning::DeleteDeviceResponse* response);
    virtual ::grpc::Status UpdateDevice(::grpc::ServerContext* context, const ::provisioning::UpdateDeviceRequest* request, ::provisioning::UpdateDeviceResponse* response);
    virtual ::grpc::Status GetAllDevices(::grpc::ServerContext* context, const ::provisioning::GetDevicesRequest* request, ::provisioning::GetDevicesResponse* response);
    virtual ::grpc::Status GetDeviceById(::grpc::ServerContext* context, const ::provisioning::GetDeviceByIdRequest* request, ::provisioning::GetDeviceByIdResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Authenticate() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, const ::provisioning::AuthRequest* /*request*/, ::provisioning::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthenticate(::grpc::ServerContext* context, ::provisioning::AuthRequest* request, ::grpc::ServerAsyncResponseWriter< ::provisioning::AuthResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddDevice() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AddDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddDevice(::grpc::ServerContext* /*context*/, const ::provisioning::AddDeviceRequest* /*request*/, ::provisioning::AddDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddDevice(::grpc::ServerContext* context, ::provisioning::AddDeviceRequest* request, ::grpc::ServerAsyncResponseWriter< ::provisioning::AddDeviceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteDevice() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDevice(::grpc::ServerContext* /*context*/, const ::provisioning::DeleteDeviceRequest* /*request*/, ::provisioning::DeleteDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteDevice(::grpc::ServerContext* context, ::provisioning::DeleteDeviceRequest* request, ::grpc::ServerAsyncResponseWriter< ::provisioning::DeleteDeviceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateDevice() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDevice(::grpc::ServerContext* /*context*/, const ::provisioning::UpdateDeviceRequest* /*request*/, ::provisioning::UpdateDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateDevice(::grpc::ServerContext* context, ::provisioning::UpdateDeviceRequest* request, ::grpc::ServerAsyncResponseWriter< ::provisioning::UpdateDeviceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllDevices() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetAllDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllDevices(::grpc::ServerContext* /*context*/, const ::provisioning::GetDevicesRequest* /*request*/, ::provisioning::GetDevicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllDevices(::grpc::ServerContext* context, ::provisioning::GetDevicesRequest* request, ::grpc::ServerAsyncResponseWriter< ::provisioning::GetDevicesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDeviceById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDeviceById() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetDeviceById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceById(::grpc::ServerContext* /*context*/, const ::provisioning::GetDeviceByIdRequest* /*request*/, ::provisioning::GetDeviceByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceById(::grpc::ServerContext* context, ::provisioning::GetDeviceByIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::provisioning::GetDeviceByIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Authenticate<WithAsyncMethod_AddDevice<WithAsyncMethod_DeleteDevice<WithAsyncMethod_UpdateDevice<WithAsyncMethod_GetAllDevices<WithAsyncMethod_GetDeviceById<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Authenticate() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::provisioning::AuthRequest, ::provisioning::AuthResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::provisioning::AuthRequest* request, ::provisioning::AuthResponse* response) { return this->Authenticate(context, request, response); }));}
    void SetMessageAllocatorFor_Authenticate(
        ::grpc::MessageAllocator< ::provisioning::AuthRequest, ::provisioning::AuthResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::provisioning::AuthRequest, ::provisioning::AuthResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, const ::provisioning::AuthRequest* /*request*/, ::provisioning::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Authenticate(
      ::grpc::CallbackServerContext* /*context*/, const ::provisioning::AuthRequest* /*request*/, ::provisioning::AuthResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddDevice() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::provisioning::AddDeviceRequest, ::provisioning::AddDeviceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::provisioning::AddDeviceRequest* request, ::provisioning::AddDeviceResponse* response) { return this->AddDevice(context, request, response); }));}
    void SetMessageAllocatorFor_AddDevice(
        ::grpc::MessageAllocator< ::provisioning::AddDeviceRequest, ::provisioning::AddDeviceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::provisioning::AddDeviceRequest, ::provisioning::AddDeviceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddDevice(::grpc::ServerContext* /*context*/, const ::provisioning::AddDeviceRequest* /*request*/, ::provisioning::AddDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::provisioning::AddDeviceRequest* /*request*/, ::provisioning::AddDeviceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteDevice() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::provisioning::DeleteDeviceRequest, ::provisioning::DeleteDeviceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::provisioning::DeleteDeviceRequest* request, ::provisioning::DeleteDeviceResponse* response) { return this->DeleteDevice(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteDevice(
        ::grpc::MessageAllocator< ::provisioning::DeleteDeviceRequest, ::provisioning::DeleteDeviceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::provisioning::DeleteDeviceRequest, ::provisioning::DeleteDeviceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDevice(::grpc::ServerContext* /*context*/, const ::provisioning::DeleteDeviceRequest* /*request*/, ::provisioning::DeleteDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::provisioning::DeleteDeviceRequest* /*request*/, ::provisioning::DeleteDeviceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateDevice() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::provisioning::UpdateDeviceRequest, ::provisioning::UpdateDeviceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::provisioning::UpdateDeviceRequest* request, ::provisioning::UpdateDeviceResponse* response) { return this->UpdateDevice(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateDevice(
        ::grpc::MessageAllocator< ::provisioning::UpdateDeviceRequest, ::provisioning::UpdateDeviceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::provisioning::UpdateDeviceRequest, ::provisioning::UpdateDeviceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDevice(::grpc::ServerContext* /*context*/, const ::provisioning::UpdateDeviceRequest* /*request*/, ::provisioning::UpdateDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::provisioning::UpdateDeviceRequest* /*request*/, ::provisioning::UpdateDeviceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAllDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllDevices() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::provisioning::GetDevicesRequest, ::provisioning::GetDevicesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::provisioning::GetDevicesRequest* request, ::provisioning::GetDevicesResponse* response) { return this->GetAllDevices(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllDevices(
        ::grpc::MessageAllocator< ::provisioning::GetDevicesRequest, ::provisioning::GetDevicesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::provisioning::GetDevicesRequest, ::provisioning::GetDevicesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAllDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllDevices(::grpc::ServerContext* /*context*/, const ::provisioning::GetDevicesRequest* /*request*/, ::provisioning::GetDevicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllDevices(
      ::grpc::CallbackServerContext* /*context*/, const ::provisioning::GetDevicesRequest* /*request*/, ::provisioning::GetDevicesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDeviceById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDeviceById() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::provisioning::GetDeviceByIdRequest, ::provisioning::GetDeviceByIdResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::provisioning::GetDeviceByIdRequest* request, ::provisioning::GetDeviceByIdResponse* response) { return this->GetDeviceById(context, request, response); }));}
    void SetMessageAllocatorFor_GetDeviceById(
        ::grpc::MessageAllocator< ::provisioning::GetDeviceByIdRequest, ::provisioning::GetDeviceByIdResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::provisioning::GetDeviceByIdRequest, ::provisioning::GetDeviceByIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDeviceById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceById(::grpc::ServerContext* /*context*/, const ::provisioning::GetDeviceByIdRequest* /*request*/, ::provisioning::GetDeviceByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDeviceById(
      ::grpc::CallbackServerContext* /*context*/, const ::provisioning::GetDeviceByIdRequest* /*request*/, ::provisioning::GetDeviceByIdResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Authenticate<WithCallbackMethod_AddDevice<WithCallbackMethod_DeleteDevice<WithCallbackMethod_UpdateDevice<WithCallbackMethod_GetAllDevices<WithCallbackMethod_GetDeviceById<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Authenticate() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, const ::provisioning::AuthRequest* /*request*/, ::provisioning::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddDevice() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AddDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddDevice(::grpc::ServerContext* /*context*/, const ::provisioning::AddDeviceRequest* /*request*/, ::provisioning::AddDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteDevice() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDevice(::grpc::ServerContext* /*context*/, const ::provisioning::DeleteDeviceRequest* /*request*/, ::provisioning::DeleteDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateDevice() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDevice(::grpc::ServerContext* /*context*/, const ::provisioning::UpdateDeviceRequest* /*request*/, ::provisioning::UpdateDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllDevices() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetAllDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllDevices(::grpc::ServerContext* /*context*/, const ::provisioning::GetDevicesRequest* /*request*/, ::provisioning::GetDevicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDeviceById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDeviceById() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetDeviceById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceById(::grpc::ServerContext* /*context*/, const ::provisioning::GetDeviceByIdRequest* /*request*/, ::provisioning::GetDeviceByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Authenticate() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, const ::provisioning::AuthRequest* /*request*/, ::provisioning::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthenticate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddDevice() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AddDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddDevice(::grpc::ServerContext* /*context*/, const ::provisioning::AddDeviceRequest* /*request*/, ::provisioning::AddDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddDevice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteDevice() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDevice(::grpc::ServerContext* /*context*/, const ::provisioning::DeleteDeviceRequest* /*request*/, ::provisioning::DeleteDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteDevice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateDevice() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDevice(::grpc::ServerContext* /*context*/, const ::provisioning::UpdateDeviceRequest* /*request*/, ::provisioning::UpdateDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateDevice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllDevices() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetAllDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllDevices(::grpc::ServerContext* /*context*/, const ::provisioning::GetDevicesRequest* /*request*/, ::provisioning::GetDevicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllDevices(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDeviceById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDeviceById() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetDeviceById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceById(::grpc::ServerContext* /*context*/, const ::provisioning::GetDeviceByIdRequest* /*request*/, ::provisioning::GetDeviceByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceById(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Authenticate() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Authenticate(context, request, response); }));
    }
    ~WithRawCallbackMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, const ::provisioning::AuthRequest* /*request*/, ::provisioning::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Authenticate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddDevice() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddDevice(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddDevice(::grpc::ServerContext* /*context*/, const ::provisioning::AddDeviceRequest* /*request*/, ::provisioning::AddDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteDevice() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteDevice(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDevice(::grpc::ServerContext* /*context*/, const ::provisioning::DeleteDeviceRequest* /*request*/, ::provisioning::DeleteDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateDevice() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateDevice(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDevice(::grpc::ServerContext* /*context*/, const ::provisioning::UpdateDeviceRequest* /*request*/, ::provisioning::UpdateDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllDevices() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllDevices(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAllDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllDevices(::grpc::ServerContext* /*context*/, const ::provisioning::GetDevicesRequest* /*request*/, ::provisioning::GetDevicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllDevices(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDeviceById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDeviceById() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDeviceById(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDeviceById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceById(::grpc::ServerContext* /*context*/, const ::provisioning::GetDeviceByIdRequest* /*request*/, ::provisioning::GetDeviceByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDeviceById(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Authenticate() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::provisioning::AuthRequest, ::provisioning::AuthResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::provisioning::AuthRequest, ::provisioning::AuthResponse>* streamer) {
                       return this->StreamedAuthenticate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, const ::provisioning::AuthRequest* /*request*/, ::provisioning::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAuthenticate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::provisioning::AuthRequest,::provisioning::AuthResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddDevice() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::provisioning::AddDeviceRequest, ::provisioning::AddDeviceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::provisioning::AddDeviceRequest, ::provisioning::AddDeviceResponse>* streamer) {
                       return this->StreamedAddDevice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddDevice(::grpc::ServerContext* /*context*/, const ::provisioning::AddDeviceRequest* /*request*/, ::provisioning::AddDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddDevice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::provisioning::AddDeviceRequest,::provisioning::AddDeviceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteDevice() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::provisioning::DeleteDeviceRequest, ::provisioning::DeleteDeviceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::provisioning::DeleteDeviceRequest, ::provisioning::DeleteDeviceResponse>* streamer) {
                       return this->StreamedDeleteDevice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteDevice(::grpc::ServerContext* /*context*/, const ::provisioning::DeleteDeviceRequest* /*request*/, ::provisioning::DeleteDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteDevice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::provisioning::DeleteDeviceRequest,::provisioning::DeleteDeviceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateDevice() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::provisioning::UpdateDeviceRequest, ::provisioning::UpdateDeviceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::provisioning::UpdateDeviceRequest, ::provisioning::UpdateDeviceResponse>* streamer) {
                       return this->StreamedUpdateDevice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateDevice(::grpc::ServerContext* /*context*/, const ::provisioning::UpdateDeviceRequest* /*request*/, ::provisioning::UpdateDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateDevice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::provisioning::UpdateDeviceRequest,::provisioning::UpdateDeviceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllDevices() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::provisioning::GetDevicesRequest, ::provisioning::GetDevicesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::provisioning::GetDevicesRequest, ::provisioning::GetDevicesResponse>* streamer) {
                       return this->StreamedGetAllDevices(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllDevices(::grpc::ServerContext* /*context*/, const ::provisioning::GetDevicesRequest* /*request*/, ::provisioning::GetDevicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllDevices(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::provisioning::GetDevicesRequest,::provisioning::GetDevicesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDeviceById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDeviceById() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::provisioning::GetDeviceByIdRequest, ::provisioning::GetDeviceByIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::provisioning::GetDeviceByIdRequest, ::provisioning::GetDeviceByIdResponse>* streamer) {
                       return this->StreamedGetDeviceById(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDeviceById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDeviceById(::grpc::ServerContext* /*context*/, const ::provisioning::GetDeviceByIdRequest* /*request*/, ::provisioning::GetDeviceByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDeviceById(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::provisioning::GetDeviceByIdRequest,::provisioning::GetDeviceByIdResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Authenticate<WithStreamedUnaryMethod_AddDevice<WithStreamedUnaryMethod_DeleteDevice<WithStreamedUnaryMethod_UpdateDevice<WithStreamedUnaryMethod_GetAllDevices<WithStreamedUnaryMethod_GetDeviceById<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Authenticate<WithStreamedUnaryMethod_AddDevice<WithStreamedUnaryMethod_DeleteDevice<WithStreamedUnaryMethod_UpdateDevice<WithStreamedUnaryMethod_GetAllDevices<WithStreamedUnaryMethod_GetDeviceById<Service > > > > > > StreamedService;
};

}  // namespace provisioning


#endif  // GRPC_provisioning_2eproto__INCLUDED
