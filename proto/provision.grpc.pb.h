// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: provision.proto
#ifndef GRPC_provision_2eproto__INCLUDED
#define GRPC_provision_2eproto__INCLUDED

#include "provision.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace shadow_agent {

class ProvisionService final {
 public:
  static constexpr char const* service_full_name() {
    return "shadow_agent.ProvisionService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RegisterDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo& request, ::shadow_agent::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shadow_agent::Response>> AsyncRegisterDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shadow_agent::Response>>(AsyncRegisterDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shadow_agent::Response>> PrepareAsyncRegisterDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shadow_agent::Response>>(PrepareAsyncRegisterDeviceRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceId& request, ::shadow_agent::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shadow_agent::Response>> AsyncDeleteDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shadow_agent::Response>>(AsyncDeleteDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shadow_agent::Response>> PrepareAsyncDeleteDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shadow_agent::Response>>(PrepareAsyncDeleteDeviceRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo& request, ::shadow_agent::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shadow_agent::Response>> AsyncUpdateDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shadow_agent::Response>>(AsyncUpdateDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shadow_agent::Response>> PrepareAsyncUpdateDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shadow_agent::Response>>(PrepareAsyncUpdateDeviceRaw(context, request, cq));
    }
    virtual ::grpc::Status ListDevices(::grpc::ClientContext* context, const ::shadow_agent::Empty& request, ::shadow_agent::DeviceList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shadow_agent::DeviceList>> AsyncListDevices(::grpc::ClientContext* context, const ::shadow_agent::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shadow_agent::DeviceList>>(AsyncListDevicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shadow_agent::DeviceList>> PrepareAsyncListDevices(::grpc::ClientContext* context, const ::shadow_agent::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shadow_agent::DeviceList>>(PrepareAsyncListDevicesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceId& request, ::shadow_agent::DeviceInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shadow_agent::DeviceInfo>> AsyncGetDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shadow_agent::DeviceInfo>>(AsyncGetDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shadow_agent::DeviceInfo>> PrepareAsyncGetDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::shadow_agent::DeviceInfo>>(PrepareAsyncGetDeviceRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void RegisterDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo* request, ::shadow_agent::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo* request, ::shadow_agent::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceId* request, ::shadow_agent::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceId* request, ::shadow_agent::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo* request, ::shadow_agent::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo* request, ::shadow_agent::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListDevices(::grpc::ClientContext* context, const ::shadow_agent::Empty* request, ::shadow_agent::DeviceList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListDevices(::grpc::ClientContext* context, const ::shadow_agent::Empty* request, ::shadow_agent::DeviceList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceId* request, ::shadow_agent::DeviceInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceId* request, ::shadow_agent::DeviceInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::shadow_agent::Response>* AsyncRegisterDeviceRaw(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::shadow_agent::Response>* PrepareAsyncRegisterDeviceRaw(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::shadow_agent::Response>* AsyncDeleteDeviceRaw(::grpc::ClientContext* context, const ::shadow_agent::DeviceId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::shadow_agent::Response>* PrepareAsyncDeleteDeviceRaw(::grpc::ClientContext* context, const ::shadow_agent::DeviceId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::shadow_agent::Response>* AsyncUpdateDeviceRaw(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::shadow_agent::Response>* PrepareAsyncUpdateDeviceRaw(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::shadow_agent::DeviceList>* AsyncListDevicesRaw(::grpc::ClientContext* context, const ::shadow_agent::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::shadow_agent::DeviceList>* PrepareAsyncListDevicesRaw(::grpc::ClientContext* context, const ::shadow_agent::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::shadow_agent::DeviceInfo>* AsyncGetDeviceRaw(::grpc::ClientContext* context, const ::shadow_agent::DeviceId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::shadow_agent::DeviceInfo>* PrepareAsyncGetDeviceRaw(::grpc::ClientContext* context, const ::shadow_agent::DeviceId& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status RegisterDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo& request, ::shadow_agent::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shadow_agent::Response>> AsyncRegisterDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shadow_agent::Response>>(AsyncRegisterDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shadow_agent::Response>> PrepareAsyncRegisterDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shadow_agent::Response>>(PrepareAsyncRegisterDeviceRaw(context, request, cq));
    }
    ::grpc::Status DeleteDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceId& request, ::shadow_agent::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shadow_agent::Response>> AsyncDeleteDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shadow_agent::Response>>(AsyncDeleteDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shadow_agent::Response>> PrepareAsyncDeleteDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shadow_agent::Response>>(PrepareAsyncDeleteDeviceRaw(context, request, cq));
    }
    ::grpc::Status UpdateDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo& request, ::shadow_agent::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shadow_agent::Response>> AsyncUpdateDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shadow_agent::Response>>(AsyncUpdateDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shadow_agent::Response>> PrepareAsyncUpdateDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shadow_agent::Response>>(PrepareAsyncUpdateDeviceRaw(context, request, cq));
    }
    ::grpc::Status ListDevices(::grpc::ClientContext* context, const ::shadow_agent::Empty& request, ::shadow_agent::DeviceList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shadow_agent::DeviceList>> AsyncListDevices(::grpc::ClientContext* context, const ::shadow_agent::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shadow_agent::DeviceList>>(AsyncListDevicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shadow_agent::DeviceList>> PrepareAsyncListDevices(::grpc::ClientContext* context, const ::shadow_agent::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shadow_agent::DeviceList>>(PrepareAsyncListDevicesRaw(context, request, cq));
    }
    ::grpc::Status GetDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceId& request, ::shadow_agent::DeviceInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shadow_agent::DeviceInfo>> AsyncGetDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shadow_agent::DeviceInfo>>(AsyncGetDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shadow_agent::DeviceInfo>> PrepareAsyncGetDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::shadow_agent::DeviceInfo>>(PrepareAsyncGetDeviceRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void RegisterDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo* request, ::shadow_agent::Response* response, std::function<void(::grpc::Status)>) override;
      void RegisterDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo* request, ::shadow_agent::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceId* request, ::shadow_agent::Response* response, std::function<void(::grpc::Status)>) override;
      void DeleteDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceId* request, ::shadow_agent::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo* request, ::shadow_agent::Response* response, std::function<void(::grpc::Status)>) override;
      void UpdateDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo* request, ::shadow_agent::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListDevices(::grpc::ClientContext* context, const ::shadow_agent::Empty* request, ::shadow_agent::DeviceList* response, std::function<void(::grpc::Status)>) override;
      void ListDevices(::grpc::ClientContext* context, const ::shadow_agent::Empty* request, ::shadow_agent::DeviceList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceId* request, ::shadow_agent::DeviceInfo* response, std::function<void(::grpc::Status)>) override;
      void GetDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceId* request, ::shadow_agent::DeviceInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::shadow_agent::Response>* AsyncRegisterDeviceRaw(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::shadow_agent::Response>* PrepareAsyncRegisterDeviceRaw(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::shadow_agent::Response>* AsyncDeleteDeviceRaw(::grpc::ClientContext* context, const ::shadow_agent::DeviceId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::shadow_agent::Response>* PrepareAsyncDeleteDeviceRaw(::grpc::ClientContext* context, const ::shadow_agent::DeviceId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::shadow_agent::Response>* AsyncUpdateDeviceRaw(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::shadow_agent::Response>* PrepareAsyncUpdateDeviceRaw(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::shadow_agent::DeviceList>* AsyncListDevicesRaw(::grpc::ClientContext* context, const ::shadow_agent::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::shadow_agent::DeviceList>* PrepareAsyncListDevicesRaw(::grpc::ClientContext* context, const ::shadow_agent::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::shadow_agent::DeviceInfo>* AsyncGetDeviceRaw(::grpc::ClientContext* context, const ::shadow_agent::DeviceId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::shadow_agent::DeviceInfo>* PrepareAsyncGetDeviceRaw(::grpc::ClientContext* context, const ::shadow_agent::DeviceId& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterDevice_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteDevice_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateDevice_;
    const ::grpc::internal::RpcMethod rpcmethod_ListDevices_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDevice_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RegisterDevice(::grpc::ServerContext* context, const ::shadow_agent::DeviceInfo* request, ::shadow_agent::Response* response);
    virtual ::grpc::Status DeleteDevice(::grpc::ServerContext* context, const ::shadow_agent::DeviceId* request, ::shadow_agent::Response* response);
    virtual ::grpc::Status UpdateDevice(::grpc::ServerContext* context, const ::shadow_agent::DeviceInfo* request, ::shadow_agent::Response* response);
    virtual ::grpc::Status ListDevices(::grpc::ServerContext* context, const ::shadow_agent::Empty* request, ::shadow_agent::DeviceList* response);
    virtual ::grpc::Status GetDevice(::grpc::ServerContext* context, const ::shadow_agent::DeviceId* request, ::shadow_agent::DeviceInfo* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterDevice() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterDevice(::grpc::ServerContext* /*context*/, const ::shadow_agent::DeviceInfo* /*request*/, ::shadow_agent::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterDevice(::grpc::ServerContext* context, ::shadow_agent::DeviceInfo* request, ::grpc::ServerAsyncResponseWriter< ::shadow_agent::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteDevice() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DeleteDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDevice(::grpc::ServerContext* /*context*/, const ::shadow_agent::DeviceId* /*request*/, ::shadow_agent::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteDevice(::grpc::ServerContext* context, ::shadow_agent::DeviceId* request, ::grpc::ServerAsyncResponseWriter< ::shadow_agent::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateDevice() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDevice(::grpc::ServerContext* /*context*/, const ::shadow_agent::DeviceInfo* /*request*/, ::shadow_agent::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateDevice(::grpc::ServerContext* context, ::shadow_agent::DeviceInfo* request, ::grpc::ServerAsyncResponseWriter< ::shadow_agent::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListDevices() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ListDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDevices(::grpc::ServerContext* /*context*/, const ::shadow_agent::Empty* /*request*/, ::shadow_agent::DeviceList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDevices(::grpc::ServerContext* context, ::shadow_agent::Empty* request, ::grpc::ServerAsyncResponseWriter< ::shadow_agent::DeviceList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDevice() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevice(::grpc::ServerContext* /*context*/, const ::shadow_agent::DeviceId* /*request*/, ::shadow_agent::DeviceInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDevice(::grpc::ServerContext* context, ::shadow_agent::DeviceId* request, ::grpc::ServerAsyncResponseWriter< ::shadow_agent::DeviceInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterDevice<WithAsyncMethod_DeleteDevice<WithAsyncMethod_UpdateDevice<WithAsyncMethod_ListDevices<WithAsyncMethod_GetDevice<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_RegisterDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterDevice() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::shadow_agent::DeviceInfo, ::shadow_agent::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::shadow_agent::DeviceInfo* request, ::shadow_agent::Response* response) { return this->RegisterDevice(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterDevice(
        ::grpc::MessageAllocator< ::shadow_agent::DeviceInfo, ::shadow_agent::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::shadow_agent::DeviceInfo, ::shadow_agent::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterDevice(::grpc::ServerContext* /*context*/, const ::shadow_agent::DeviceInfo* /*request*/, ::shadow_agent::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::shadow_agent::DeviceInfo* /*request*/, ::shadow_agent::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteDevice() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::shadow_agent::DeviceId, ::shadow_agent::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::shadow_agent::DeviceId* request, ::shadow_agent::Response* response) { return this->DeleteDevice(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteDevice(
        ::grpc::MessageAllocator< ::shadow_agent::DeviceId, ::shadow_agent::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::shadow_agent::DeviceId, ::shadow_agent::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDevice(::grpc::ServerContext* /*context*/, const ::shadow_agent::DeviceId* /*request*/, ::shadow_agent::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::shadow_agent::DeviceId* /*request*/, ::shadow_agent::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateDevice() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::shadow_agent::DeviceInfo, ::shadow_agent::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::shadow_agent::DeviceInfo* request, ::shadow_agent::Response* response) { return this->UpdateDevice(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateDevice(
        ::grpc::MessageAllocator< ::shadow_agent::DeviceInfo, ::shadow_agent::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::shadow_agent::DeviceInfo, ::shadow_agent::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDevice(::grpc::ServerContext* /*context*/, const ::shadow_agent::DeviceInfo* /*request*/, ::shadow_agent::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::shadow_agent::DeviceInfo* /*request*/, ::shadow_agent::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListDevices() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::shadow_agent::Empty, ::shadow_agent::DeviceList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::shadow_agent::Empty* request, ::shadow_agent::DeviceList* response) { return this->ListDevices(context, request, response); }));}
    void SetMessageAllocatorFor_ListDevices(
        ::grpc::MessageAllocator< ::shadow_agent::Empty, ::shadow_agent::DeviceList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::shadow_agent::Empty, ::shadow_agent::DeviceList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDevices(::grpc::ServerContext* /*context*/, const ::shadow_agent::Empty* /*request*/, ::shadow_agent::DeviceList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListDevices(
      ::grpc::CallbackServerContext* /*context*/, const ::shadow_agent::Empty* /*request*/, ::shadow_agent::DeviceList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDevice() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::shadow_agent::DeviceId, ::shadow_agent::DeviceInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::shadow_agent::DeviceId* request, ::shadow_agent::DeviceInfo* response) { return this->GetDevice(context, request, response); }));}
    void SetMessageAllocatorFor_GetDevice(
        ::grpc::MessageAllocator< ::shadow_agent::DeviceId, ::shadow_agent::DeviceInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::shadow_agent::DeviceId, ::shadow_agent::DeviceInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevice(::grpc::ServerContext* /*context*/, const ::shadow_agent::DeviceId* /*request*/, ::shadow_agent::DeviceInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::shadow_agent::DeviceId* /*request*/, ::shadow_agent::DeviceInfo* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_RegisterDevice<WithCallbackMethod_DeleteDevice<WithCallbackMethod_UpdateDevice<WithCallbackMethod_ListDevices<WithCallbackMethod_GetDevice<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RegisterDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterDevice() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterDevice(::grpc::ServerContext* /*context*/, const ::shadow_agent::DeviceInfo* /*request*/, ::shadow_agent::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteDevice() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DeleteDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDevice(::grpc::ServerContext* /*context*/, const ::shadow_agent::DeviceId* /*request*/, ::shadow_agent::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateDevice() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDevice(::grpc::ServerContext* /*context*/, const ::shadow_agent::DeviceInfo* /*request*/, ::shadow_agent::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListDevices() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ListDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDevices(::grpc::ServerContext* /*context*/, const ::shadow_agent::Empty* /*request*/, ::shadow_agent::DeviceList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDevice() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevice(::grpc::ServerContext* /*context*/, const ::shadow_agent::DeviceId* /*request*/, ::shadow_agent::DeviceInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterDevice() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RegisterDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterDevice(::grpc::ServerContext* /*context*/, const ::shadow_agent::DeviceInfo* /*request*/, ::shadow_agent::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterDevice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteDevice() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DeleteDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDevice(::grpc::ServerContext* /*context*/, const ::shadow_agent::DeviceId* /*request*/, ::shadow_agent::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteDevice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateDevice() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDevice(::grpc::ServerContext* /*context*/, const ::shadow_agent::DeviceInfo* /*request*/, ::shadow_agent::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateDevice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListDevices() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ListDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDevices(::grpc::ServerContext* /*context*/, const ::shadow_agent::Empty* /*request*/, ::shadow_agent::DeviceList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDevices(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDevice() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevice(::grpc::ServerContext* /*context*/, const ::shadow_agent::DeviceId* /*request*/, ::shadow_agent::DeviceInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDevice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterDevice() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterDevice(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterDevice(::grpc::ServerContext* /*context*/, const ::shadow_agent::DeviceInfo* /*request*/, ::shadow_agent::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteDevice() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteDevice(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDevice(::grpc::ServerContext* /*context*/, const ::shadow_agent::DeviceId* /*request*/, ::shadow_agent::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateDevice() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateDevice(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDevice(::grpc::ServerContext* /*context*/, const ::shadow_agent::DeviceInfo* /*request*/, ::shadow_agent::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListDevices() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListDevices(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDevices(::grpc::ServerContext* /*context*/, const ::shadow_agent::Empty* /*request*/, ::shadow_agent::DeviceList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListDevices(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDevice() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDevice(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevice(::grpc::ServerContext* /*context*/, const ::shadow_agent::DeviceId* /*request*/, ::shadow_agent::DeviceInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterDevice() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::shadow_agent::DeviceInfo, ::shadow_agent::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::shadow_agent::DeviceInfo, ::shadow_agent::Response>* streamer) {
                       return this->StreamedRegisterDevice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterDevice(::grpc::ServerContext* /*context*/, const ::shadow_agent::DeviceInfo* /*request*/, ::shadow_agent::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterDevice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::shadow_agent::DeviceInfo,::shadow_agent::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteDevice() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::shadow_agent::DeviceId, ::shadow_agent::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::shadow_agent::DeviceId, ::shadow_agent::Response>* streamer) {
                       return this->StreamedDeleteDevice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteDevice(::grpc::ServerContext* /*context*/, const ::shadow_agent::DeviceId* /*request*/, ::shadow_agent::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteDevice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::shadow_agent::DeviceId,::shadow_agent::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateDevice() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::shadow_agent::DeviceInfo, ::shadow_agent::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::shadow_agent::DeviceInfo, ::shadow_agent::Response>* streamer) {
                       return this->StreamedUpdateDevice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateDevice(::grpc::ServerContext* /*context*/, const ::shadow_agent::DeviceInfo* /*request*/, ::shadow_agent::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateDevice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::shadow_agent::DeviceInfo,::shadow_agent::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListDevices() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::shadow_agent::Empty, ::shadow_agent::DeviceList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::shadow_agent::Empty, ::shadow_agent::DeviceList>* streamer) {
                       return this->StreamedListDevices(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListDevices(::grpc::ServerContext* /*context*/, const ::shadow_agent::Empty* /*request*/, ::shadow_agent::DeviceList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListDevices(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::shadow_agent::Empty,::shadow_agent::DeviceList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDevice() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::shadow_agent::DeviceId, ::shadow_agent::DeviceInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::shadow_agent::DeviceId, ::shadow_agent::DeviceInfo>* streamer) {
                       return this->StreamedGetDevice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDevice(::grpc::ServerContext* /*context*/, const ::shadow_agent::DeviceId* /*request*/, ::shadow_agent::DeviceInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDevice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::shadow_agent::DeviceId,::shadow_agent::DeviceInfo>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RegisterDevice<WithStreamedUnaryMethod_DeleteDevice<WithStreamedUnaryMethod_UpdateDevice<WithStreamedUnaryMethod_ListDevices<WithStreamedUnaryMethod_GetDevice<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RegisterDevice<WithStreamedUnaryMethod_DeleteDevice<WithStreamedUnaryMethod_UpdateDevice<WithStreamedUnaryMethod_ListDevices<WithStreamedUnaryMethod_GetDevice<Service > > > > > StreamedService;
};

}  // namespace shadow_agent


#endif  // GRPC_provision_2eproto__INCLUDED
