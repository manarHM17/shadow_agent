// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ota_service.proto
// Original file comments:
// common/ota_service.proto
#ifndef GRPC_ota_5fservice_2eproto__INCLUDED
#define GRPC_ota_5fservice_2eproto__INCLUDED

#include "ota_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace ota {

// Service principal OTA
class OTAService final {
 public:
  static constexpr char const* service_full_name() {
    return "ota.OTAService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Vérifier les mises à jour disponibles
    virtual ::grpc::Status CheckUpdate(::grpc::ClientContext* context, const ::ota::UpdateRequest& request, ::ota::UpdateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ota::UpdateResponse>> AsyncCheckUpdate(::grpc::ClientContext* context, const ::ota::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ota::UpdateResponse>>(AsyncCheckUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ota::UpdateResponse>> PrepareAsyncCheckUpdate(::grpc::ClientContext* context, const ::ota::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ota::UpdateResponse>>(PrepareAsyncCheckUpdateRaw(context, request, cq));
    }
    // Télécharger un fichier de mise à jour
    std::unique_ptr< ::grpc::ClientReaderInterface< ::ota::FileChunk>> DownloadUpdate(::grpc::ClientContext* context, const ::ota::DownloadRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::ota::FileChunk>>(DownloadUpdateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ota::FileChunk>> AsyncDownloadUpdate(::grpc::ClientContext* context, const ::ota::DownloadRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ota::FileChunk>>(AsyncDownloadUpdateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ota::FileChunk>> PrepareAsyncDownloadUpdate(::grpc::ClientContext* context, const ::ota::DownloadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ota::FileChunk>>(PrepareAsyncDownloadUpdateRaw(context, request, cq));
    }
    // Confirmer l'installation
    virtual ::grpc::Status ConfirmInstallation(::grpc::ClientContext* context, const ::ota::InstallationRequest& request, ::ota::InstallationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ota::InstallationResponse>> AsyncConfirmInstallation(::grpc::ClientContext* context, const ::ota::InstallationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ota::InstallationResponse>>(AsyncConfirmInstallationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ota::InstallationResponse>> PrepareAsyncConfirmInstallation(::grpc::ClientContext* context, const ::ota::InstallationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ota::InstallationResponse>>(PrepareAsyncConfirmInstallationRaw(context, request, cq));
    }
    // Obtenir le statut d'un dispositif
    virtual ::grpc::Status GetDeviceStatus(::grpc::ClientContext* context, const ::ota::DeviceStatusRequest& request, ::ota::DeviceStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ota::DeviceStatusResponse>> AsyncGetDeviceStatus(::grpc::ClientContext* context, const ::ota::DeviceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ota::DeviceStatusResponse>>(AsyncGetDeviceStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ota::DeviceStatusResponse>> PrepareAsyncGetDeviceStatus(::grpc::ClientContext* context, const ::ota::DeviceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ota::DeviceStatusResponse>>(PrepareAsyncGetDeviceStatusRaw(context, request, cq));
    }
    // Enregistrer un dispositif
    virtual ::grpc::Status RegisterDevice(::grpc::ClientContext* context, const ::ota::DeviceRegistration& request, ::ota::RegistrationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ota::RegistrationResponse>> AsyncRegisterDevice(::grpc::ClientContext* context, const ::ota::DeviceRegistration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ota::RegistrationResponse>>(AsyncRegisterDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ota::RegistrationResponse>> PrepareAsyncRegisterDevice(::grpc::ClientContext* context, const ::ota::DeviceRegistration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ota::RegistrationResponse>>(PrepareAsyncRegisterDeviceRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Vérifier les mises à jour disponibles
      virtual void CheckUpdate(::grpc::ClientContext* context, const ::ota::UpdateRequest* request, ::ota::UpdateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckUpdate(::grpc::ClientContext* context, const ::ota::UpdateRequest* request, ::ota::UpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Télécharger un fichier de mise à jour
      virtual void DownloadUpdate(::grpc::ClientContext* context, const ::ota::DownloadRequest* request, ::grpc::ClientReadReactor< ::ota::FileChunk>* reactor) = 0;
      // Confirmer l'installation
      virtual void ConfirmInstallation(::grpc::ClientContext* context, const ::ota::InstallationRequest* request, ::ota::InstallationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ConfirmInstallation(::grpc::ClientContext* context, const ::ota::InstallationRequest* request, ::ota::InstallationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Obtenir le statut d'un dispositif
      virtual void GetDeviceStatus(::grpc::ClientContext* context, const ::ota::DeviceStatusRequest* request, ::ota::DeviceStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDeviceStatus(::grpc::ClientContext* context, const ::ota::DeviceStatusRequest* request, ::ota::DeviceStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Enregistrer un dispositif
      virtual void RegisterDevice(::grpc::ClientContext* context, const ::ota::DeviceRegistration* request, ::ota::RegistrationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterDevice(::grpc::ClientContext* context, const ::ota::DeviceRegistration* request, ::ota::RegistrationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ota::UpdateResponse>* AsyncCheckUpdateRaw(::grpc::ClientContext* context, const ::ota::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ota::UpdateResponse>* PrepareAsyncCheckUpdateRaw(::grpc::ClientContext* context, const ::ota::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::ota::FileChunk>* DownloadUpdateRaw(::grpc::ClientContext* context, const ::ota::DownloadRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ota::FileChunk>* AsyncDownloadUpdateRaw(::grpc::ClientContext* context, const ::ota::DownloadRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ota::FileChunk>* PrepareAsyncDownloadUpdateRaw(::grpc::ClientContext* context, const ::ota::DownloadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ota::InstallationResponse>* AsyncConfirmInstallationRaw(::grpc::ClientContext* context, const ::ota::InstallationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ota::InstallationResponse>* PrepareAsyncConfirmInstallationRaw(::grpc::ClientContext* context, const ::ota::InstallationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ota::DeviceStatusResponse>* AsyncGetDeviceStatusRaw(::grpc::ClientContext* context, const ::ota::DeviceStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ota::DeviceStatusResponse>* PrepareAsyncGetDeviceStatusRaw(::grpc::ClientContext* context, const ::ota::DeviceStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ota::RegistrationResponse>* AsyncRegisterDeviceRaw(::grpc::ClientContext* context, const ::ota::DeviceRegistration& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ota::RegistrationResponse>* PrepareAsyncRegisterDeviceRaw(::grpc::ClientContext* context, const ::ota::DeviceRegistration& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CheckUpdate(::grpc::ClientContext* context, const ::ota::UpdateRequest& request, ::ota::UpdateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ota::UpdateResponse>> AsyncCheckUpdate(::grpc::ClientContext* context, const ::ota::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ota::UpdateResponse>>(AsyncCheckUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ota::UpdateResponse>> PrepareAsyncCheckUpdate(::grpc::ClientContext* context, const ::ota::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ota::UpdateResponse>>(PrepareAsyncCheckUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::ota::FileChunk>> DownloadUpdate(::grpc::ClientContext* context, const ::ota::DownloadRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::ota::FileChunk>>(DownloadUpdateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ota::FileChunk>> AsyncDownloadUpdate(::grpc::ClientContext* context, const ::ota::DownloadRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ota::FileChunk>>(AsyncDownloadUpdateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ota::FileChunk>> PrepareAsyncDownloadUpdate(::grpc::ClientContext* context, const ::ota::DownloadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ota::FileChunk>>(PrepareAsyncDownloadUpdateRaw(context, request, cq));
    }
    ::grpc::Status ConfirmInstallation(::grpc::ClientContext* context, const ::ota::InstallationRequest& request, ::ota::InstallationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ota::InstallationResponse>> AsyncConfirmInstallation(::grpc::ClientContext* context, const ::ota::InstallationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ota::InstallationResponse>>(AsyncConfirmInstallationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ota::InstallationResponse>> PrepareAsyncConfirmInstallation(::grpc::ClientContext* context, const ::ota::InstallationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ota::InstallationResponse>>(PrepareAsyncConfirmInstallationRaw(context, request, cq));
    }
    ::grpc::Status GetDeviceStatus(::grpc::ClientContext* context, const ::ota::DeviceStatusRequest& request, ::ota::DeviceStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ota::DeviceStatusResponse>> AsyncGetDeviceStatus(::grpc::ClientContext* context, const ::ota::DeviceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ota::DeviceStatusResponse>>(AsyncGetDeviceStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ota::DeviceStatusResponse>> PrepareAsyncGetDeviceStatus(::grpc::ClientContext* context, const ::ota::DeviceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ota::DeviceStatusResponse>>(PrepareAsyncGetDeviceStatusRaw(context, request, cq));
    }
    ::grpc::Status RegisterDevice(::grpc::ClientContext* context, const ::ota::DeviceRegistration& request, ::ota::RegistrationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ota::RegistrationResponse>> AsyncRegisterDevice(::grpc::ClientContext* context, const ::ota::DeviceRegistration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ota::RegistrationResponse>>(AsyncRegisterDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ota::RegistrationResponse>> PrepareAsyncRegisterDevice(::grpc::ClientContext* context, const ::ota::DeviceRegistration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ota::RegistrationResponse>>(PrepareAsyncRegisterDeviceRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CheckUpdate(::grpc::ClientContext* context, const ::ota::UpdateRequest* request, ::ota::UpdateResponse* response, std::function<void(::grpc::Status)>) override;
      void CheckUpdate(::grpc::ClientContext* context, const ::ota::UpdateRequest* request, ::ota::UpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DownloadUpdate(::grpc::ClientContext* context, const ::ota::DownloadRequest* request, ::grpc::ClientReadReactor< ::ota::FileChunk>* reactor) override;
      void ConfirmInstallation(::grpc::ClientContext* context, const ::ota::InstallationRequest* request, ::ota::InstallationResponse* response, std::function<void(::grpc::Status)>) override;
      void ConfirmInstallation(::grpc::ClientContext* context, const ::ota::InstallationRequest* request, ::ota::InstallationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDeviceStatus(::grpc::ClientContext* context, const ::ota::DeviceStatusRequest* request, ::ota::DeviceStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDeviceStatus(::grpc::ClientContext* context, const ::ota::DeviceStatusRequest* request, ::ota::DeviceStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RegisterDevice(::grpc::ClientContext* context, const ::ota::DeviceRegistration* request, ::ota::RegistrationResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterDevice(::grpc::ClientContext* context, const ::ota::DeviceRegistration* request, ::ota::RegistrationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ota::UpdateResponse>* AsyncCheckUpdateRaw(::grpc::ClientContext* context, const ::ota::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ota::UpdateResponse>* PrepareAsyncCheckUpdateRaw(::grpc::ClientContext* context, const ::ota::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::ota::FileChunk>* DownloadUpdateRaw(::grpc::ClientContext* context, const ::ota::DownloadRequest& request) override;
    ::grpc::ClientAsyncReader< ::ota::FileChunk>* AsyncDownloadUpdateRaw(::grpc::ClientContext* context, const ::ota::DownloadRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::ota::FileChunk>* PrepareAsyncDownloadUpdateRaw(::grpc::ClientContext* context, const ::ota::DownloadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ota::InstallationResponse>* AsyncConfirmInstallationRaw(::grpc::ClientContext* context, const ::ota::InstallationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ota::InstallationResponse>* PrepareAsyncConfirmInstallationRaw(::grpc::ClientContext* context, const ::ota::InstallationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ota::DeviceStatusResponse>* AsyncGetDeviceStatusRaw(::grpc::ClientContext* context, const ::ota::DeviceStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ota::DeviceStatusResponse>* PrepareAsyncGetDeviceStatusRaw(::grpc::ClientContext* context, const ::ota::DeviceStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ota::RegistrationResponse>* AsyncRegisterDeviceRaw(::grpc::ClientContext* context, const ::ota::DeviceRegistration& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ota::RegistrationResponse>* PrepareAsyncRegisterDeviceRaw(::grpc::ClientContext* context, const ::ota::DeviceRegistration& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CheckUpdate_;
    const ::grpc::internal::RpcMethod rpcmethod_DownloadUpdate_;
    const ::grpc::internal::RpcMethod rpcmethod_ConfirmInstallation_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDeviceStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterDevice_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Vérifier les mises à jour disponibles
    virtual ::grpc::Status CheckUpdate(::grpc::ServerContext* context, const ::ota::UpdateRequest* request, ::ota::UpdateResponse* response);
    // Télécharger un fichier de mise à jour
    virtual ::grpc::Status DownloadUpdate(::grpc::ServerContext* context, const ::ota::DownloadRequest* request, ::grpc::ServerWriter< ::ota::FileChunk>* writer);
    // Confirmer l'installation
    virtual ::grpc::Status ConfirmInstallation(::grpc::ServerContext* context, const ::ota::InstallationRequest* request, ::ota::InstallationResponse* response);
    // Obtenir le statut d'un dispositif
    virtual ::grpc::Status GetDeviceStatus(::grpc::ServerContext* context, const ::ota::DeviceStatusRequest* request, ::ota::DeviceStatusResponse* response);
    // Enregistrer un dispositif
    virtual ::grpc::Status RegisterDevice(::grpc::ServerContext* context, const ::ota::DeviceRegistration* request, ::ota::RegistrationResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckUpdate() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CheckUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckUpdate(::grpc::ServerContext* /*context*/, const ::ota::UpdateRequest* /*request*/, ::ota::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckUpdate(::grpc::ServerContext* context, ::ota::UpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::ota::UpdateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DownloadUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DownloadUpdate() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DownloadUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadUpdate(::grpc::ServerContext* /*context*/, const ::ota::DownloadRequest* /*request*/, ::grpc::ServerWriter< ::ota::FileChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadUpdate(::grpc::ServerContext* context, ::ota::DownloadRequest* request, ::grpc::ServerAsyncWriter< ::ota::FileChunk>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ConfirmInstallation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ConfirmInstallation() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ConfirmInstallation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfirmInstallation(::grpc::ServerContext* /*context*/, const ::ota::InstallationRequest* /*request*/, ::ota::InstallationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConfirmInstallation(::grpc::ServerContext* context, ::ota::InstallationRequest* request, ::grpc::ServerAsyncResponseWriter< ::ota::InstallationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDeviceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDeviceStatus() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetDeviceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceStatus(::grpc::ServerContext* /*context*/, const ::ota::DeviceStatusRequest* /*request*/, ::ota::DeviceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceStatus(::grpc::ServerContext* context, ::ota::DeviceStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::ota::DeviceStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterDevice() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_RegisterDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterDevice(::grpc::ServerContext* /*context*/, const ::ota::DeviceRegistration* /*request*/, ::ota::RegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterDevice(::grpc::ServerContext* context, ::ota::DeviceRegistration* request, ::grpc::ServerAsyncResponseWriter< ::ota::RegistrationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CheckUpdate<WithAsyncMethod_DownloadUpdate<WithAsyncMethod_ConfirmInstallation<WithAsyncMethod_GetDeviceStatus<WithAsyncMethod_RegisterDevice<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CheckUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CheckUpdate() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ota::UpdateRequest, ::ota::UpdateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ota::UpdateRequest* request, ::ota::UpdateResponse* response) { return this->CheckUpdate(context, request, response); }));}
    void SetMessageAllocatorFor_CheckUpdate(
        ::grpc::MessageAllocator< ::ota::UpdateRequest, ::ota::UpdateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ota::UpdateRequest, ::ota::UpdateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CheckUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckUpdate(::grpc::ServerContext* /*context*/, const ::ota::UpdateRequest* /*request*/, ::ota::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::ota::UpdateRequest* /*request*/, ::ota::UpdateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DownloadUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DownloadUpdate() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::ota::DownloadRequest, ::ota::FileChunk>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ota::DownloadRequest* request) { return this->DownloadUpdate(context, request); }));
    }
    ~WithCallbackMethod_DownloadUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadUpdate(::grpc::ServerContext* /*context*/, const ::ota::DownloadRequest* /*request*/, ::grpc::ServerWriter< ::ota::FileChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::ota::FileChunk>* DownloadUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::ota::DownloadRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ConfirmInstallation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ConfirmInstallation() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::ota::InstallationRequest, ::ota::InstallationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ota::InstallationRequest* request, ::ota::InstallationResponse* response) { return this->ConfirmInstallation(context, request, response); }));}
    void SetMessageAllocatorFor_ConfirmInstallation(
        ::grpc::MessageAllocator< ::ota::InstallationRequest, ::ota::InstallationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ota::InstallationRequest, ::ota::InstallationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ConfirmInstallation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfirmInstallation(::grpc::ServerContext* /*context*/, const ::ota::InstallationRequest* /*request*/, ::ota::InstallationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ConfirmInstallation(
      ::grpc::CallbackServerContext* /*context*/, const ::ota::InstallationRequest* /*request*/, ::ota::InstallationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDeviceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDeviceStatus() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::ota::DeviceStatusRequest, ::ota::DeviceStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ota::DeviceStatusRequest* request, ::ota::DeviceStatusResponse* response) { return this->GetDeviceStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetDeviceStatus(
        ::grpc::MessageAllocator< ::ota::DeviceStatusRequest, ::ota::DeviceStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ota::DeviceStatusRequest, ::ota::DeviceStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDeviceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceStatus(::grpc::ServerContext* /*context*/, const ::ota::DeviceStatusRequest* /*request*/, ::ota::DeviceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDeviceStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::ota::DeviceStatusRequest* /*request*/, ::ota::DeviceStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RegisterDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterDevice() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::ota::DeviceRegistration, ::ota::RegistrationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ota::DeviceRegistration* request, ::ota::RegistrationResponse* response) { return this->RegisterDevice(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterDevice(
        ::grpc::MessageAllocator< ::ota::DeviceRegistration, ::ota::RegistrationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ota::DeviceRegistration, ::ota::RegistrationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterDevice(::grpc::ServerContext* /*context*/, const ::ota::DeviceRegistration* /*request*/, ::ota::RegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::ota::DeviceRegistration* /*request*/, ::ota::RegistrationResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CheckUpdate<WithCallbackMethod_DownloadUpdate<WithCallbackMethod_ConfirmInstallation<WithCallbackMethod_GetDeviceStatus<WithCallbackMethod_RegisterDevice<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CheckUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckUpdate() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CheckUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckUpdate(::grpc::ServerContext* /*context*/, const ::ota::UpdateRequest* /*request*/, ::ota::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DownloadUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DownloadUpdate() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DownloadUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadUpdate(::grpc::ServerContext* /*context*/, const ::ota::DownloadRequest* /*request*/, ::grpc::ServerWriter< ::ota::FileChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ConfirmInstallation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ConfirmInstallation() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ConfirmInstallation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfirmInstallation(::grpc::ServerContext* /*context*/, const ::ota::InstallationRequest* /*request*/, ::ota::InstallationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDeviceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDeviceStatus() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetDeviceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceStatus(::grpc::ServerContext* /*context*/, const ::ota::DeviceStatusRequest* /*request*/, ::ota::DeviceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterDevice() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_RegisterDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterDevice(::grpc::ServerContext* /*context*/, const ::ota::DeviceRegistration* /*request*/, ::ota::RegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckUpdate() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CheckUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckUpdate(::grpc::ServerContext* /*context*/, const ::ota::UpdateRequest* /*request*/, ::ota::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DownloadUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DownloadUpdate() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DownloadUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadUpdate(::grpc::ServerContext* /*context*/, const ::ota::DownloadRequest* /*request*/, ::grpc::ServerWriter< ::ota::FileChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConfirmInstallation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ConfirmInstallation() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ConfirmInstallation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfirmInstallation(::grpc::ServerContext* /*context*/, const ::ota::InstallationRequest* /*request*/, ::ota::InstallationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConfirmInstallation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDeviceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDeviceStatus() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetDeviceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceStatus(::grpc::ServerContext* /*context*/, const ::ota::DeviceStatusRequest* /*request*/, ::ota::DeviceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterDevice() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_RegisterDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterDevice(::grpc::ServerContext* /*context*/, const ::ota::DeviceRegistration* /*request*/, ::ota::RegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterDevice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CheckUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CheckUpdate() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CheckUpdate(context, request, response); }));
    }
    ~WithRawCallbackMethod_CheckUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckUpdate(::grpc::ServerContext* /*context*/, const ::ota::UpdateRequest* /*request*/, ::ota::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DownloadUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DownloadUpdate() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->DownloadUpdate(context, request); }));
    }
    ~WithRawCallbackMethod_DownloadUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadUpdate(::grpc::ServerContext* /*context*/, const ::ota::DownloadRequest* /*request*/, ::grpc::ServerWriter< ::ota::FileChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* DownloadUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ConfirmInstallation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ConfirmInstallation() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ConfirmInstallation(context, request, response); }));
    }
    ~WithRawCallbackMethod_ConfirmInstallation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfirmInstallation(::grpc::ServerContext* /*context*/, const ::ota::InstallationRequest* /*request*/, ::ota::InstallationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ConfirmInstallation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDeviceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDeviceStatus() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDeviceStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDeviceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceStatus(::grpc::ServerContext* /*context*/, const ::ota::DeviceStatusRequest* /*request*/, ::ota::DeviceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDeviceStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterDevice() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterDevice(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterDevice(::grpc::ServerContext* /*context*/, const ::ota::DeviceRegistration* /*request*/, ::ota::RegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CheckUpdate() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ota::UpdateRequest, ::ota::UpdateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ota::UpdateRequest, ::ota::UpdateResponse>* streamer) {
                       return this->StreamedCheckUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CheckUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckUpdate(::grpc::ServerContext* /*context*/, const ::ota::UpdateRequest* /*request*/, ::ota::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ota::UpdateRequest,::ota::UpdateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ConfirmInstallation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ConfirmInstallation() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ota::InstallationRequest, ::ota::InstallationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ota::InstallationRequest, ::ota::InstallationResponse>* streamer) {
                       return this->StreamedConfirmInstallation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ConfirmInstallation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ConfirmInstallation(::grpc::ServerContext* /*context*/, const ::ota::InstallationRequest* /*request*/, ::ota::InstallationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConfirmInstallation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ota::InstallationRequest,::ota::InstallationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDeviceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDeviceStatus() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ota::DeviceStatusRequest, ::ota::DeviceStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ota::DeviceStatusRequest, ::ota::DeviceStatusResponse>* streamer) {
                       return this->StreamedGetDeviceStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDeviceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDeviceStatus(::grpc::ServerContext* /*context*/, const ::ota::DeviceStatusRequest* /*request*/, ::ota::DeviceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDeviceStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ota::DeviceStatusRequest,::ota::DeviceStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterDevice() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ota::DeviceRegistration, ::ota::RegistrationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ota::DeviceRegistration, ::ota::RegistrationResponse>* streamer) {
                       return this->StreamedRegisterDevice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterDevice(::grpc::ServerContext* /*context*/, const ::ota::DeviceRegistration* /*request*/, ::ota::RegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterDevice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ota::DeviceRegistration,::ota::RegistrationResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CheckUpdate<WithStreamedUnaryMethod_ConfirmInstallation<WithStreamedUnaryMethod_GetDeviceStatus<WithStreamedUnaryMethod_RegisterDevice<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_DownloadUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_DownloadUpdate() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::ota::DownloadRequest, ::ota::FileChunk>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::ota::DownloadRequest, ::ota::FileChunk>* streamer) {
                       return this->StreamedDownloadUpdate(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_DownloadUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DownloadUpdate(::grpc::ServerContext* /*context*/, const ::ota::DownloadRequest* /*request*/, ::grpc::ServerWriter< ::ota::FileChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedDownloadUpdate(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::ota::DownloadRequest,::ota::FileChunk>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_DownloadUpdate<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_CheckUpdate<WithSplitStreamingMethod_DownloadUpdate<WithStreamedUnaryMethod_ConfirmInstallation<WithStreamedUnaryMethod_GetDeviceStatus<WithStreamedUnaryMethod_RegisterDevice<Service > > > > > StreamedService;
};

}  // namespace ota


#endif  // GRPC_ota_5fservice_2eproto__INCLUDED
