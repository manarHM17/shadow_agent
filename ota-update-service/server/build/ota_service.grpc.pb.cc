// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ota_service.proto

#include "ota_service.pb.h"
#include "ota_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace ota {

static const char* OTAUpdateService_method_names[] = {
  "/ota.OTAUpdateService/CheckForUpdates",
  "/ota.OTAUpdateService/DownloadUpdate",
  "/ota.OTAUpdateService/ReportStatus",
};

std::unique_ptr< OTAUpdateService::Stub> OTAUpdateService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OTAUpdateService::Stub> stub(new OTAUpdateService::Stub(channel, options));
  return stub;
}

OTAUpdateService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CheckForUpdates_(OTAUpdateService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DownloadUpdate_(OTAUpdateService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ReportStatus_(OTAUpdateService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status OTAUpdateService::Stub::CheckForUpdates(::grpc::ClientContext* context, const ::ota::CheckUpdatesRequest& request, ::ota::CheckUpdatesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ota::CheckUpdatesRequest, ::ota::CheckUpdatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckForUpdates_, context, request, response);
}

void OTAUpdateService::Stub::async::CheckForUpdates(::grpc::ClientContext* context, const ::ota::CheckUpdatesRequest* request, ::ota::CheckUpdatesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ota::CheckUpdatesRequest, ::ota::CheckUpdatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckForUpdates_, context, request, response, std::move(f));
}

void OTAUpdateService::Stub::async::CheckForUpdates(::grpc::ClientContext* context, const ::ota::CheckUpdatesRequest* request, ::ota::CheckUpdatesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckForUpdates_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ota::CheckUpdatesResponse>* OTAUpdateService::Stub::PrepareAsyncCheckForUpdatesRaw(::grpc::ClientContext* context, const ::ota::CheckUpdatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ota::CheckUpdatesResponse, ::ota::CheckUpdatesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckForUpdates_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ota::CheckUpdatesResponse>* OTAUpdateService::Stub::AsyncCheckForUpdatesRaw(::grpc::ClientContext* context, const ::ota::CheckUpdatesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckForUpdatesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::ota::DownloadResponse>* OTAUpdateService::Stub::DownloadUpdateRaw(::grpc::ClientContext* context, const ::ota::DownloadRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::ota::DownloadResponse>::Create(channel_.get(), rpcmethod_DownloadUpdate_, context, request);
}

void OTAUpdateService::Stub::async::DownloadUpdate(::grpc::ClientContext* context, const ::ota::DownloadRequest* request, ::grpc::ClientReadReactor< ::ota::DownloadResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::ota::DownloadResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_DownloadUpdate_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ota::DownloadResponse>* OTAUpdateService::Stub::AsyncDownloadUpdateRaw(::grpc::ClientContext* context, const ::ota::DownloadRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ota::DownloadResponse>::Create(channel_.get(), cq, rpcmethod_DownloadUpdate_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ota::DownloadResponse>* OTAUpdateService::Stub::PrepareAsyncDownloadUpdateRaw(::grpc::ClientContext* context, const ::ota::DownloadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ota::DownloadResponse>::Create(channel_.get(), cq, rpcmethod_DownloadUpdate_, context, request, false, nullptr);
}

::grpc::Status OTAUpdateService::Stub::ReportStatus(::grpc::ClientContext* context, const ::ota::StatusReport& request, ::ota::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ota::StatusReport, ::ota::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReportStatus_, context, request, response);
}

void OTAUpdateService::Stub::async::ReportStatus(::grpc::ClientContext* context, const ::ota::StatusReport* request, ::ota::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ota::StatusReport, ::ota::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReportStatus_, context, request, response, std::move(f));
}

void OTAUpdateService::Stub::async::ReportStatus(::grpc::ClientContext* context, const ::ota::StatusReport* request, ::ota::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReportStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ota::StatusResponse>* OTAUpdateService::Stub::PrepareAsyncReportStatusRaw(::grpc::ClientContext* context, const ::ota::StatusReport& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ota::StatusResponse, ::ota::StatusReport, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReportStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ota::StatusResponse>* OTAUpdateService::Stub::AsyncReportStatusRaw(::grpc::ClientContext* context, const ::ota::StatusReport& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReportStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

OTAUpdateService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OTAUpdateService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OTAUpdateService::Service, ::ota::CheckUpdatesRequest, ::ota::CheckUpdatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OTAUpdateService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ota::CheckUpdatesRequest* req,
             ::ota::CheckUpdatesResponse* resp) {
               return service->CheckForUpdates(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OTAUpdateService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< OTAUpdateService::Service, ::ota::DownloadRequest, ::ota::DownloadResponse>(
          [](OTAUpdateService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ota::DownloadRequest* req,
             ::grpc::ServerWriter<::ota::DownloadResponse>* writer) {
               return service->DownloadUpdate(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OTAUpdateService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OTAUpdateService::Service, ::ota::StatusReport, ::ota::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OTAUpdateService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ota::StatusReport* req,
             ::ota::StatusResponse* resp) {
               return service->ReportStatus(ctx, req, resp);
             }, this)));
}

OTAUpdateService::Service::~Service() {
}

::grpc::Status OTAUpdateService::Service::CheckForUpdates(::grpc::ServerContext* context, const ::ota::CheckUpdatesRequest* request, ::ota::CheckUpdatesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OTAUpdateService::Service::DownloadUpdate(::grpc::ServerContext* context, const ::ota::DownloadRequest* request, ::grpc::ServerWriter< ::ota::DownloadResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OTAUpdateService::Service::ReportStatus(::grpc::ServerContext* context, const ::ota::StatusReport* request, ::ota::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ota

