// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ota_service.proto

#include "ota_service.pb.h"
#include "ota_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace ota {

static const char* OTAService_method_names[] = {
  "/ota.OTAService/CheckForUpdate",
  "/ota.OTAService/DownloadUpdate",
  "/ota.OTAService/InstallUpdate",
  "/ota.OTAService/GetUpdateStatus",
};

std::unique_ptr< OTAService::Stub> OTAService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OTAService::Stub> stub(new OTAService::Stub(channel, options));
  return stub;
}

OTAService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CheckForUpdate_(OTAService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DownloadUpdate_(OTAService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_InstallUpdate_(OTAService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUpdateStatus_(OTAService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status OTAService::Stub::CheckForUpdate(::grpc::ClientContext* context, const ::ota::CheckUpdateRequest& request, ::ota::CheckUpdateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ota::CheckUpdateRequest, ::ota::CheckUpdateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckForUpdate_, context, request, response);
}

void OTAService::Stub::async::CheckForUpdate(::grpc::ClientContext* context, const ::ota::CheckUpdateRequest* request, ::ota::CheckUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ota::CheckUpdateRequest, ::ota::CheckUpdateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckForUpdate_, context, request, response, std::move(f));
}

void OTAService::Stub::async::CheckForUpdate(::grpc::ClientContext* context, const ::ota::CheckUpdateRequest* request, ::ota::CheckUpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckForUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ota::CheckUpdateResponse>* OTAService::Stub::PrepareAsyncCheckForUpdateRaw(::grpc::ClientContext* context, const ::ota::CheckUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ota::CheckUpdateResponse, ::ota::CheckUpdateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckForUpdate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ota::CheckUpdateResponse>* OTAService::Stub::AsyncCheckForUpdateRaw(::grpc::ClientContext* context, const ::ota::CheckUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckForUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::ota::DownloadChunk>* OTAService::Stub::DownloadUpdateRaw(::grpc::ClientContext* context, const ::ota::DownloadRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::ota::DownloadChunk>::Create(channel_.get(), rpcmethod_DownloadUpdate_, context, request);
}

void OTAService::Stub::async::DownloadUpdate(::grpc::ClientContext* context, const ::ota::DownloadRequest* request, ::grpc::ClientReadReactor< ::ota::DownloadChunk>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::ota::DownloadChunk>::Create(stub_->channel_.get(), stub_->rpcmethod_DownloadUpdate_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ota::DownloadChunk>* OTAService::Stub::AsyncDownloadUpdateRaw(::grpc::ClientContext* context, const ::ota::DownloadRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ota::DownloadChunk>::Create(channel_.get(), cq, rpcmethod_DownloadUpdate_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ota::DownloadChunk>* OTAService::Stub::PrepareAsyncDownloadUpdateRaw(::grpc::ClientContext* context, const ::ota::DownloadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ota::DownloadChunk>::Create(channel_.get(), cq, rpcmethod_DownloadUpdate_, context, request, false, nullptr);
}

::grpc::Status OTAService::Stub::InstallUpdate(::grpc::ClientContext* context, const ::ota::InstallRequest& request, ::ota::InstallResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ota::InstallRequest, ::ota::InstallResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InstallUpdate_, context, request, response);
}

void OTAService::Stub::async::InstallUpdate(::grpc::ClientContext* context, const ::ota::InstallRequest* request, ::ota::InstallResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ota::InstallRequest, ::ota::InstallResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstallUpdate_, context, request, response, std::move(f));
}

void OTAService::Stub::async::InstallUpdate(::grpc::ClientContext* context, const ::ota::InstallRequest* request, ::ota::InstallResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstallUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ota::InstallResponse>* OTAService::Stub::PrepareAsyncInstallUpdateRaw(::grpc::ClientContext* context, const ::ota::InstallRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ota::InstallResponse, ::ota::InstallRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InstallUpdate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ota::InstallResponse>* OTAService::Stub::AsyncInstallUpdateRaw(::grpc::ClientContext* context, const ::ota::InstallRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInstallUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OTAService::Stub::GetUpdateStatus(::grpc::ClientContext* context, const ::ota::StatusRequest& request, ::ota::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ota::StatusRequest, ::ota::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUpdateStatus_, context, request, response);
}

void OTAService::Stub::async::GetUpdateStatus(::grpc::ClientContext* context, const ::ota::StatusRequest* request, ::ota::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ota::StatusRequest, ::ota::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUpdateStatus_, context, request, response, std::move(f));
}

void OTAService::Stub::async::GetUpdateStatus(::grpc::ClientContext* context, const ::ota::StatusRequest* request, ::ota::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUpdateStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ota::StatusResponse>* OTAService::Stub::PrepareAsyncGetUpdateStatusRaw(::grpc::ClientContext* context, const ::ota::StatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ota::StatusResponse, ::ota::StatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUpdateStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ota::StatusResponse>* OTAService::Stub::AsyncGetUpdateStatusRaw(::grpc::ClientContext* context, const ::ota::StatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUpdateStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

OTAService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OTAService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OTAService::Service, ::ota::CheckUpdateRequest, ::ota::CheckUpdateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OTAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ota::CheckUpdateRequest* req,
             ::ota::CheckUpdateResponse* resp) {
               return service->CheckForUpdate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OTAService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< OTAService::Service, ::ota::DownloadRequest, ::ota::DownloadChunk>(
          [](OTAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ota::DownloadRequest* req,
             ::grpc::ServerWriter<::ota::DownloadChunk>* writer) {
               return service->DownloadUpdate(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OTAService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OTAService::Service, ::ota::InstallRequest, ::ota::InstallResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OTAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ota::InstallRequest* req,
             ::ota::InstallResponse* resp) {
               return service->InstallUpdate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OTAService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OTAService::Service, ::ota::StatusRequest, ::ota::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OTAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ota::StatusRequest* req,
             ::ota::StatusResponse* resp) {
               return service->GetUpdateStatus(ctx, req, resp);
             }, this)));
}

OTAService::Service::~Service() {
}

::grpc::Status OTAService::Service::CheckForUpdate(::grpc::ServerContext* context, const ::ota::CheckUpdateRequest* request, ::ota::CheckUpdateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OTAService::Service::DownloadUpdate(::grpc::ServerContext* context, const ::ota::DownloadRequest* request, ::grpc::ServerWriter< ::ota::DownloadChunk>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OTAService::Service::InstallUpdate(::grpc::ServerContext* context, const ::ota::InstallRequest* request, ::ota::InstallResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OTAService::Service::GetUpdateStatus(::grpc::ServerContext* context, const ::ota::StatusRequest* request, ::ota::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ota

