// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ota_service.proto
// Original file comments:
// proto/ota_service.proto
#ifndef GRPC_ota_5fservice_2eproto__INCLUDED
#define GRPC_ota_5fservice_2eproto__INCLUDED

#include "ota_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace ota {

class OTAService final {
 public:
  static constexpr char const* service_full_name() {
    return "ota.OTAService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Vérifier si une mise à jour est disponible
    virtual ::grpc::Status CheckForUpdate(::grpc::ClientContext* context, const ::ota::CheckUpdateRequest& request, ::ota::CheckUpdateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ota::CheckUpdateResponse>> AsyncCheckForUpdate(::grpc::ClientContext* context, const ::ota::CheckUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ota::CheckUpdateResponse>>(AsyncCheckForUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ota::CheckUpdateResponse>> PrepareAsyncCheckForUpdate(::grpc::ClientContext* context, const ::ota::CheckUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ota::CheckUpdateResponse>>(PrepareAsyncCheckForUpdateRaw(context, request, cq));
    }
    // Télécharger une mise à jour
    std::unique_ptr< ::grpc::ClientReaderInterface< ::ota::DownloadChunk>> DownloadUpdate(::grpc::ClientContext* context, const ::ota::DownloadRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::ota::DownloadChunk>>(DownloadUpdateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ota::DownloadChunk>> AsyncDownloadUpdate(::grpc::ClientContext* context, const ::ota::DownloadRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ota::DownloadChunk>>(AsyncDownloadUpdateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ota::DownloadChunk>> PrepareAsyncDownloadUpdate(::grpc::ClientContext* context, const ::ota::DownloadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ota::DownloadChunk>>(PrepareAsyncDownloadUpdateRaw(context, request, cq));
    }
    // Installer une mise à jour
    virtual ::grpc::Status InstallUpdate(::grpc::ClientContext* context, const ::ota::InstallRequest& request, ::ota::InstallResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ota::InstallResponse>> AsyncInstallUpdate(::grpc::ClientContext* context, const ::ota::InstallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ota::InstallResponse>>(AsyncInstallUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ota::InstallResponse>> PrepareAsyncInstallUpdate(::grpc::ClientContext* context, const ::ota::InstallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ota::InstallResponse>>(PrepareAsyncInstallUpdateRaw(context, request, cq));
    }
    // Obtenir l'état de la mise à jour
    virtual ::grpc::Status GetUpdateStatus(::grpc::ClientContext* context, const ::ota::StatusRequest& request, ::ota::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ota::StatusResponse>> AsyncGetUpdateStatus(::grpc::ClientContext* context, const ::ota::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ota::StatusResponse>>(AsyncGetUpdateStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ota::StatusResponse>> PrepareAsyncGetUpdateStatus(::grpc::ClientContext* context, const ::ota::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ota::StatusResponse>>(PrepareAsyncGetUpdateStatusRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Vérifier si une mise à jour est disponible
      virtual void CheckForUpdate(::grpc::ClientContext* context, const ::ota::CheckUpdateRequest* request, ::ota::CheckUpdateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckForUpdate(::grpc::ClientContext* context, const ::ota::CheckUpdateRequest* request, ::ota::CheckUpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Télécharger une mise à jour
      virtual void DownloadUpdate(::grpc::ClientContext* context, const ::ota::DownloadRequest* request, ::grpc::ClientReadReactor< ::ota::DownloadChunk>* reactor) = 0;
      // Installer une mise à jour
      virtual void InstallUpdate(::grpc::ClientContext* context, const ::ota::InstallRequest* request, ::ota::InstallResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InstallUpdate(::grpc::ClientContext* context, const ::ota::InstallRequest* request, ::ota::InstallResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Obtenir l'état de la mise à jour
      virtual void GetUpdateStatus(::grpc::ClientContext* context, const ::ota::StatusRequest* request, ::ota::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetUpdateStatus(::grpc::ClientContext* context, const ::ota::StatusRequest* request, ::ota::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ota::CheckUpdateResponse>* AsyncCheckForUpdateRaw(::grpc::ClientContext* context, const ::ota::CheckUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ota::CheckUpdateResponse>* PrepareAsyncCheckForUpdateRaw(::grpc::ClientContext* context, const ::ota::CheckUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::ota::DownloadChunk>* DownloadUpdateRaw(::grpc::ClientContext* context, const ::ota::DownloadRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ota::DownloadChunk>* AsyncDownloadUpdateRaw(::grpc::ClientContext* context, const ::ota::DownloadRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ota::DownloadChunk>* PrepareAsyncDownloadUpdateRaw(::grpc::ClientContext* context, const ::ota::DownloadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ota::InstallResponse>* AsyncInstallUpdateRaw(::grpc::ClientContext* context, const ::ota::InstallRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ota::InstallResponse>* PrepareAsyncInstallUpdateRaw(::grpc::ClientContext* context, const ::ota::InstallRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ota::StatusResponse>* AsyncGetUpdateStatusRaw(::grpc::ClientContext* context, const ::ota::StatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ota::StatusResponse>* PrepareAsyncGetUpdateStatusRaw(::grpc::ClientContext* context, const ::ota::StatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CheckForUpdate(::grpc::ClientContext* context, const ::ota::CheckUpdateRequest& request, ::ota::CheckUpdateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ota::CheckUpdateResponse>> AsyncCheckForUpdate(::grpc::ClientContext* context, const ::ota::CheckUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ota::CheckUpdateResponse>>(AsyncCheckForUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ota::CheckUpdateResponse>> PrepareAsyncCheckForUpdate(::grpc::ClientContext* context, const ::ota::CheckUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ota::CheckUpdateResponse>>(PrepareAsyncCheckForUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::ota::DownloadChunk>> DownloadUpdate(::grpc::ClientContext* context, const ::ota::DownloadRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::ota::DownloadChunk>>(DownloadUpdateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ota::DownloadChunk>> AsyncDownloadUpdate(::grpc::ClientContext* context, const ::ota::DownloadRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ota::DownloadChunk>>(AsyncDownloadUpdateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ota::DownloadChunk>> PrepareAsyncDownloadUpdate(::grpc::ClientContext* context, const ::ota::DownloadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ota::DownloadChunk>>(PrepareAsyncDownloadUpdateRaw(context, request, cq));
    }
    ::grpc::Status InstallUpdate(::grpc::ClientContext* context, const ::ota::InstallRequest& request, ::ota::InstallResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ota::InstallResponse>> AsyncInstallUpdate(::grpc::ClientContext* context, const ::ota::InstallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ota::InstallResponse>>(AsyncInstallUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ota::InstallResponse>> PrepareAsyncInstallUpdate(::grpc::ClientContext* context, const ::ota::InstallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ota::InstallResponse>>(PrepareAsyncInstallUpdateRaw(context, request, cq));
    }
    ::grpc::Status GetUpdateStatus(::grpc::ClientContext* context, const ::ota::StatusRequest& request, ::ota::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ota::StatusResponse>> AsyncGetUpdateStatus(::grpc::ClientContext* context, const ::ota::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ota::StatusResponse>>(AsyncGetUpdateStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ota::StatusResponse>> PrepareAsyncGetUpdateStatus(::grpc::ClientContext* context, const ::ota::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ota::StatusResponse>>(PrepareAsyncGetUpdateStatusRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CheckForUpdate(::grpc::ClientContext* context, const ::ota::CheckUpdateRequest* request, ::ota::CheckUpdateResponse* response, std::function<void(::grpc::Status)>) override;
      void CheckForUpdate(::grpc::ClientContext* context, const ::ota::CheckUpdateRequest* request, ::ota::CheckUpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DownloadUpdate(::grpc::ClientContext* context, const ::ota::DownloadRequest* request, ::grpc::ClientReadReactor< ::ota::DownloadChunk>* reactor) override;
      void InstallUpdate(::grpc::ClientContext* context, const ::ota::InstallRequest* request, ::ota::InstallResponse* response, std::function<void(::grpc::Status)>) override;
      void InstallUpdate(::grpc::ClientContext* context, const ::ota::InstallRequest* request, ::ota::InstallResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetUpdateStatus(::grpc::ClientContext* context, const ::ota::StatusRequest* request, ::ota::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void GetUpdateStatus(::grpc::ClientContext* context, const ::ota::StatusRequest* request, ::ota::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ota::CheckUpdateResponse>* AsyncCheckForUpdateRaw(::grpc::ClientContext* context, const ::ota::CheckUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ota::CheckUpdateResponse>* PrepareAsyncCheckForUpdateRaw(::grpc::ClientContext* context, const ::ota::CheckUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::ota::DownloadChunk>* DownloadUpdateRaw(::grpc::ClientContext* context, const ::ota::DownloadRequest& request) override;
    ::grpc::ClientAsyncReader< ::ota::DownloadChunk>* AsyncDownloadUpdateRaw(::grpc::ClientContext* context, const ::ota::DownloadRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::ota::DownloadChunk>* PrepareAsyncDownloadUpdateRaw(::grpc::ClientContext* context, const ::ota::DownloadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ota::InstallResponse>* AsyncInstallUpdateRaw(::grpc::ClientContext* context, const ::ota::InstallRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ota::InstallResponse>* PrepareAsyncInstallUpdateRaw(::grpc::ClientContext* context, const ::ota::InstallRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ota::StatusResponse>* AsyncGetUpdateStatusRaw(::grpc::ClientContext* context, const ::ota::StatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ota::StatusResponse>* PrepareAsyncGetUpdateStatusRaw(::grpc::ClientContext* context, const ::ota::StatusRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CheckForUpdate_;
    const ::grpc::internal::RpcMethod rpcmethod_DownloadUpdate_;
    const ::grpc::internal::RpcMethod rpcmethod_InstallUpdate_;
    const ::grpc::internal::RpcMethod rpcmethod_GetUpdateStatus_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Vérifier si une mise à jour est disponible
    virtual ::grpc::Status CheckForUpdate(::grpc::ServerContext* context, const ::ota::CheckUpdateRequest* request, ::ota::CheckUpdateResponse* response);
    // Télécharger une mise à jour
    virtual ::grpc::Status DownloadUpdate(::grpc::ServerContext* context, const ::ota::DownloadRequest* request, ::grpc::ServerWriter< ::ota::DownloadChunk>* writer);
    // Installer une mise à jour
    virtual ::grpc::Status InstallUpdate(::grpc::ServerContext* context, const ::ota::InstallRequest* request, ::ota::InstallResponse* response);
    // Obtenir l'état de la mise à jour
    virtual ::grpc::Status GetUpdateStatus(::grpc::ServerContext* context, const ::ota::StatusRequest* request, ::ota::StatusResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckForUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckForUpdate() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CheckForUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckForUpdate(::grpc::ServerContext* /*context*/, const ::ota::CheckUpdateRequest* /*request*/, ::ota::CheckUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckForUpdate(::grpc::ServerContext* context, ::ota::CheckUpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::ota::CheckUpdateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DownloadUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DownloadUpdate() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DownloadUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadUpdate(::grpc::ServerContext* /*context*/, const ::ota::DownloadRequest* /*request*/, ::grpc::ServerWriter< ::ota::DownloadChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadUpdate(::grpc::ServerContext* context, ::ota::DownloadRequest* request, ::grpc::ServerAsyncWriter< ::ota::DownloadChunk>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InstallUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InstallUpdate() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_InstallUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallUpdate(::grpc::ServerContext* /*context*/, const ::ota::InstallRequest* /*request*/, ::ota::InstallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInstallUpdate(::grpc::ServerContext* context, ::ota::InstallRequest* request, ::grpc::ServerAsyncResponseWriter< ::ota::InstallResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUpdateStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetUpdateStatus() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetUpdateStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUpdateStatus(::grpc::ServerContext* /*context*/, const ::ota::StatusRequest* /*request*/, ::ota::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUpdateStatus(::grpc::ServerContext* context, ::ota::StatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::ota::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CheckForUpdate<WithAsyncMethod_DownloadUpdate<WithAsyncMethod_InstallUpdate<WithAsyncMethod_GetUpdateStatus<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CheckForUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CheckForUpdate() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ota::CheckUpdateRequest, ::ota::CheckUpdateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ota::CheckUpdateRequest* request, ::ota::CheckUpdateResponse* response) { return this->CheckForUpdate(context, request, response); }));}
    void SetMessageAllocatorFor_CheckForUpdate(
        ::grpc::MessageAllocator< ::ota::CheckUpdateRequest, ::ota::CheckUpdateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ota::CheckUpdateRequest, ::ota::CheckUpdateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CheckForUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckForUpdate(::grpc::ServerContext* /*context*/, const ::ota::CheckUpdateRequest* /*request*/, ::ota::CheckUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckForUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::ota::CheckUpdateRequest* /*request*/, ::ota::CheckUpdateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DownloadUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DownloadUpdate() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::ota::DownloadRequest, ::ota::DownloadChunk>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ota::DownloadRequest* request) { return this->DownloadUpdate(context, request); }));
    }
    ~WithCallbackMethod_DownloadUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadUpdate(::grpc::ServerContext* /*context*/, const ::ota::DownloadRequest* /*request*/, ::grpc::ServerWriter< ::ota::DownloadChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::ota::DownloadChunk>* DownloadUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::ota::DownloadRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_InstallUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InstallUpdate() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::ota::InstallRequest, ::ota::InstallResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ota::InstallRequest* request, ::ota::InstallResponse* response) { return this->InstallUpdate(context, request, response); }));}
    void SetMessageAllocatorFor_InstallUpdate(
        ::grpc::MessageAllocator< ::ota::InstallRequest, ::ota::InstallResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ota::InstallRequest, ::ota::InstallResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InstallUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallUpdate(::grpc::ServerContext* /*context*/, const ::ota::InstallRequest* /*request*/, ::ota::InstallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InstallUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::ota::InstallRequest* /*request*/, ::ota::InstallResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetUpdateStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetUpdateStatus() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::ota::StatusRequest, ::ota::StatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ota::StatusRequest* request, ::ota::StatusResponse* response) { return this->GetUpdateStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetUpdateStatus(
        ::grpc::MessageAllocator< ::ota::StatusRequest, ::ota::StatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ota::StatusRequest, ::ota::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetUpdateStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUpdateStatus(::grpc::ServerContext* /*context*/, const ::ota::StatusRequest* /*request*/, ::ota::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUpdateStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::ota::StatusRequest* /*request*/, ::ota::StatusResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CheckForUpdate<WithCallbackMethod_DownloadUpdate<WithCallbackMethod_InstallUpdate<WithCallbackMethod_GetUpdateStatus<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CheckForUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckForUpdate() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CheckForUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckForUpdate(::grpc::ServerContext* /*context*/, const ::ota::CheckUpdateRequest* /*request*/, ::ota::CheckUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DownloadUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DownloadUpdate() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DownloadUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadUpdate(::grpc::ServerContext* /*context*/, const ::ota::DownloadRequest* /*request*/, ::grpc::ServerWriter< ::ota::DownloadChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InstallUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InstallUpdate() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_InstallUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallUpdate(::grpc::ServerContext* /*context*/, const ::ota::InstallRequest* /*request*/, ::ota::InstallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetUpdateStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetUpdateStatus() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetUpdateStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUpdateStatus(::grpc::ServerContext* /*context*/, const ::ota::StatusRequest* /*request*/, ::ota::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckForUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckForUpdate() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CheckForUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckForUpdate(::grpc::ServerContext* /*context*/, const ::ota::CheckUpdateRequest* /*request*/, ::ota::CheckUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckForUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DownloadUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DownloadUpdate() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DownloadUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadUpdate(::grpc::ServerContext* /*context*/, const ::ota::DownloadRequest* /*request*/, ::grpc::ServerWriter< ::ota::DownloadChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InstallUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InstallUpdate() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_InstallUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallUpdate(::grpc::ServerContext* /*context*/, const ::ota::InstallRequest* /*request*/, ::ota::InstallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInstallUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetUpdateStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetUpdateStatus() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetUpdateStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUpdateStatus(::grpc::ServerContext* /*context*/, const ::ota::StatusRequest* /*request*/, ::ota::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUpdateStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CheckForUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CheckForUpdate() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CheckForUpdate(context, request, response); }));
    }
    ~WithRawCallbackMethod_CheckForUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckForUpdate(::grpc::ServerContext* /*context*/, const ::ota::CheckUpdateRequest* /*request*/, ::ota::CheckUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckForUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DownloadUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DownloadUpdate() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->DownloadUpdate(context, request); }));
    }
    ~WithRawCallbackMethod_DownloadUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadUpdate(::grpc::ServerContext* /*context*/, const ::ota::DownloadRequest* /*request*/, ::grpc::ServerWriter< ::ota::DownloadChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* DownloadUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InstallUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InstallUpdate() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InstallUpdate(context, request, response); }));
    }
    ~WithRawCallbackMethod_InstallUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallUpdate(::grpc::ServerContext* /*context*/, const ::ota::InstallRequest* /*request*/, ::ota::InstallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InstallUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetUpdateStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetUpdateStatus() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetUpdateStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetUpdateStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUpdateStatus(::grpc::ServerContext* /*context*/, const ::ota::StatusRequest* /*request*/, ::ota::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUpdateStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckForUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CheckForUpdate() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ota::CheckUpdateRequest, ::ota::CheckUpdateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ota::CheckUpdateRequest, ::ota::CheckUpdateResponse>* streamer) {
                       return this->StreamedCheckForUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CheckForUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckForUpdate(::grpc::ServerContext* /*context*/, const ::ota::CheckUpdateRequest* /*request*/, ::ota::CheckUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckForUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ota::CheckUpdateRequest,::ota::CheckUpdateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InstallUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InstallUpdate() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ota::InstallRequest, ::ota::InstallResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ota::InstallRequest, ::ota::InstallResponse>* streamer) {
                       return this->StreamedInstallUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InstallUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InstallUpdate(::grpc::ServerContext* /*context*/, const ::ota::InstallRequest* /*request*/, ::ota::InstallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInstallUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ota::InstallRequest,::ota::InstallResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetUpdateStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetUpdateStatus() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ota::StatusRequest, ::ota::StatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ota::StatusRequest, ::ota::StatusResponse>* streamer) {
                       return this->StreamedGetUpdateStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetUpdateStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUpdateStatus(::grpc::ServerContext* /*context*/, const ::ota::StatusRequest* /*request*/, ::ota::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetUpdateStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ota::StatusRequest,::ota::StatusResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CheckForUpdate<WithStreamedUnaryMethod_InstallUpdate<WithStreamedUnaryMethod_GetUpdateStatus<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_DownloadUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_DownloadUpdate() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::ota::DownloadRequest, ::ota::DownloadChunk>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::ota::DownloadRequest, ::ota::DownloadChunk>* streamer) {
                       return this->StreamedDownloadUpdate(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_DownloadUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DownloadUpdate(::grpc::ServerContext* /*context*/, const ::ota::DownloadRequest* /*request*/, ::grpc::ServerWriter< ::ota::DownloadChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedDownloadUpdate(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::ota::DownloadRequest,::ota::DownloadChunk>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_DownloadUpdate<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_CheckForUpdate<WithSplitStreamingMethod_DownloadUpdate<WithStreamedUnaryMethod_InstallUpdate<WithStreamedUnaryMethod_GetUpdateStatus<Service > > > > StreamedService;
};

}  // namespace ota


#endif  // GRPC_ota_5fservice_2eproto__INCLUDED
