// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ota_service.proto
#ifndef GRPC_ota_5fservice_2eproto__INCLUDED
#define GRPC_ota_5fservice_2eproto__INCLUDED

#include "ota_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace ota {

// Service OTA - uniquement pour les mises à jour
class OTAService final {
 public:
  static constexpr char const* service_full_name() {
    return "ota.OTAService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Stream périodique pour vérifier les mises à jour disponibles
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::ota::UpdateCheckRequest, ::ota::UpdateCheckResponse>> CheckForUpdates(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::ota::UpdateCheckRequest, ::ota::UpdateCheckResponse>>(CheckForUpdatesRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ota::UpdateCheckRequest, ::ota::UpdateCheckResponse>> AsyncCheckForUpdates(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ota::UpdateCheckRequest, ::ota::UpdateCheckResponse>>(AsyncCheckForUpdatesRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ota::UpdateCheckRequest, ::ota::UpdateCheckResponse>> PrepareAsyncCheckForUpdates(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ota::UpdateCheckRequest, ::ota::UpdateCheckResponse>>(PrepareAsyncCheckForUpdatesRaw(context, cq));
    }
    // Télécharger une mise à jour (streaming pour les gros fichiers)
    std::unique_ptr< ::grpc::ClientReaderInterface< ::ota::DownloadResponse>> DownloadUpdate(::grpc::ClientContext* context, const ::ota::DownloadRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::ota::DownloadResponse>>(DownloadUpdateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ota::DownloadResponse>> AsyncDownloadUpdate(::grpc::ClientContext* context, const ::ota::DownloadRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ota::DownloadResponse>>(AsyncDownloadUpdateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ota::DownloadResponse>> PrepareAsyncDownloadUpdate(::grpc::ClientContext* context, const ::ota::DownloadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ota::DownloadResponse>>(PrepareAsyncDownloadUpdateRaw(context, request, cq));
    }
    // Stream périodique pour rapporter le statut des mises à jour
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::ota::UpdateStatusRequest, ::ota::UpdateStatusResponse>> ReportUpdateStatus(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::ota::UpdateStatusRequest, ::ota::UpdateStatusResponse>>(ReportUpdateStatusRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ota::UpdateStatusRequest, ::ota::UpdateStatusResponse>> AsyncReportUpdateStatus(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ota::UpdateStatusRequest, ::ota::UpdateStatusResponse>>(AsyncReportUpdateStatusRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ota::UpdateStatusRequest, ::ota::UpdateStatusResponse>> PrepareAsyncReportUpdateStatus(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ota::UpdateStatusRequest, ::ota::UpdateStatusResponse>>(PrepareAsyncReportUpdateStatusRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Stream périodique pour vérifier les mises à jour disponibles
      virtual void CheckForUpdates(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::ota::UpdateCheckRequest,::ota::UpdateCheckResponse>* reactor) = 0;
      // Télécharger une mise à jour (streaming pour les gros fichiers)
      virtual void DownloadUpdate(::grpc::ClientContext* context, const ::ota::DownloadRequest* request, ::grpc::ClientReadReactor< ::ota::DownloadResponse>* reactor) = 0;
      // Stream périodique pour rapporter le statut des mises à jour
      virtual void ReportUpdateStatus(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::ota::UpdateStatusRequest,::ota::UpdateStatusResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderWriterInterface< ::ota::UpdateCheckRequest, ::ota::UpdateCheckResponse>* CheckForUpdatesRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::ota::UpdateCheckRequest, ::ota::UpdateCheckResponse>* AsyncCheckForUpdatesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::ota::UpdateCheckRequest, ::ota::UpdateCheckResponse>* PrepareAsyncCheckForUpdatesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::ota::DownloadResponse>* DownloadUpdateRaw(::grpc::ClientContext* context, const ::ota::DownloadRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ota::DownloadResponse>* AsyncDownloadUpdateRaw(::grpc::ClientContext* context, const ::ota::DownloadRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ota::DownloadResponse>* PrepareAsyncDownloadUpdateRaw(::grpc::ClientContext* context, const ::ota::DownloadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::ota::UpdateStatusRequest, ::ota::UpdateStatusResponse>* ReportUpdateStatusRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::ota::UpdateStatusRequest, ::ota::UpdateStatusResponse>* AsyncReportUpdateStatusRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::ota::UpdateStatusRequest, ::ota::UpdateStatusResponse>* PrepareAsyncReportUpdateStatusRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReaderWriter< ::ota::UpdateCheckRequest, ::ota::UpdateCheckResponse>> CheckForUpdates(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::ota::UpdateCheckRequest, ::ota::UpdateCheckResponse>>(CheckForUpdatesRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::ota::UpdateCheckRequest, ::ota::UpdateCheckResponse>> AsyncCheckForUpdates(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::ota::UpdateCheckRequest, ::ota::UpdateCheckResponse>>(AsyncCheckForUpdatesRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::ota::UpdateCheckRequest, ::ota::UpdateCheckResponse>> PrepareAsyncCheckForUpdates(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::ota::UpdateCheckRequest, ::ota::UpdateCheckResponse>>(PrepareAsyncCheckForUpdatesRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::ota::DownloadResponse>> DownloadUpdate(::grpc::ClientContext* context, const ::ota::DownloadRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::ota::DownloadResponse>>(DownloadUpdateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ota::DownloadResponse>> AsyncDownloadUpdate(::grpc::ClientContext* context, const ::ota::DownloadRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ota::DownloadResponse>>(AsyncDownloadUpdateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ota::DownloadResponse>> PrepareAsyncDownloadUpdate(::grpc::ClientContext* context, const ::ota::DownloadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ota::DownloadResponse>>(PrepareAsyncDownloadUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::ota::UpdateStatusRequest, ::ota::UpdateStatusResponse>> ReportUpdateStatus(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::ota::UpdateStatusRequest, ::ota::UpdateStatusResponse>>(ReportUpdateStatusRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::ota::UpdateStatusRequest, ::ota::UpdateStatusResponse>> AsyncReportUpdateStatus(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::ota::UpdateStatusRequest, ::ota::UpdateStatusResponse>>(AsyncReportUpdateStatusRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::ota::UpdateStatusRequest, ::ota::UpdateStatusResponse>> PrepareAsyncReportUpdateStatus(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::ota::UpdateStatusRequest, ::ota::UpdateStatusResponse>>(PrepareAsyncReportUpdateStatusRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CheckForUpdates(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::ota::UpdateCheckRequest,::ota::UpdateCheckResponse>* reactor) override;
      void DownloadUpdate(::grpc::ClientContext* context, const ::ota::DownloadRequest* request, ::grpc::ClientReadReactor< ::ota::DownloadResponse>* reactor) override;
      void ReportUpdateStatus(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::ota::UpdateStatusRequest,::ota::UpdateStatusResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReaderWriter< ::ota::UpdateCheckRequest, ::ota::UpdateCheckResponse>* CheckForUpdatesRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::ota::UpdateCheckRequest, ::ota::UpdateCheckResponse>* AsyncCheckForUpdatesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::ota::UpdateCheckRequest, ::ota::UpdateCheckResponse>* PrepareAsyncCheckForUpdatesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::ota::DownloadResponse>* DownloadUpdateRaw(::grpc::ClientContext* context, const ::ota::DownloadRequest& request) override;
    ::grpc::ClientAsyncReader< ::ota::DownloadResponse>* AsyncDownloadUpdateRaw(::grpc::ClientContext* context, const ::ota::DownloadRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::ota::DownloadResponse>* PrepareAsyncDownloadUpdateRaw(::grpc::ClientContext* context, const ::ota::DownloadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::ota::UpdateStatusRequest, ::ota::UpdateStatusResponse>* ReportUpdateStatusRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::ota::UpdateStatusRequest, ::ota::UpdateStatusResponse>* AsyncReportUpdateStatusRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::ota::UpdateStatusRequest, ::ota::UpdateStatusResponse>* PrepareAsyncReportUpdateStatusRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CheckForUpdates_;
    const ::grpc::internal::RpcMethod rpcmethod_DownloadUpdate_;
    const ::grpc::internal::RpcMethod rpcmethod_ReportUpdateStatus_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Stream périodique pour vérifier les mises à jour disponibles
    virtual ::grpc::Status CheckForUpdates(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::ota::UpdateCheckResponse, ::ota::UpdateCheckRequest>* stream);
    // Télécharger une mise à jour (streaming pour les gros fichiers)
    virtual ::grpc::Status DownloadUpdate(::grpc::ServerContext* context, const ::ota::DownloadRequest* request, ::grpc::ServerWriter< ::ota::DownloadResponse>* writer);
    // Stream périodique pour rapporter le statut des mises à jour
    virtual ::grpc::Status ReportUpdateStatus(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::ota::UpdateStatusResponse, ::ota::UpdateStatusRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckForUpdates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckForUpdates() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CheckForUpdates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckForUpdates(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ota::UpdateCheckResponse, ::ota::UpdateCheckRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckForUpdates(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::ota::UpdateCheckResponse, ::ota::UpdateCheckRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DownloadUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DownloadUpdate() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DownloadUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadUpdate(::grpc::ServerContext* /*context*/, const ::ota::DownloadRequest* /*request*/, ::grpc::ServerWriter< ::ota::DownloadResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadUpdate(::grpc::ServerContext* context, ::ota::DownloadRequest* request, ::grpc::ServerAsyncWriter< ::ota::DownloadResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReportUpdateStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReportUpdateStatus() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ReportUpdateStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportUpdateStatus(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ota::UpdateStatusResponse, ::ota::UpdateStatusRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportUpdateStatus(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::ota::UpdateStatusResponse, ::ota::UpdateStatusRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CheckForUpdates<WithAsyncMethod_DownloadUpdate<WithAsyncMethod_ReportUpdateStatus<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CheckForUpdates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CheckForUpdates() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::ota::UpdateCheckRequest, ::ota::UpdateCheckResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->CheckForUpdates(context); }));
    }
    ~WithCallbackMethod_CheckForUpdates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckForUpdates(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ota::UpdateCheckResponse, ::ota::UpdateCheckRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::ota::UpdateCheckRequest, ::ota::UpdateCheckResponse>* CheckForUpdates(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DownloadUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DownloadUpdate() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::ota::DownloadRequest, ::ota::DownloadResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ota::DownloadRequest* request) { return this->DownloadUpdate(context, request); }));
    }
    ~WithCallbackMethod_DownloadUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadUpdate(::grpc::ServerContext* /*context*/, const ::ota::DownloadRequest* /*request*/, ::grpc::ServerWriter< ::ota::DownloadResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::ota::DownloadResponse>* DownloadUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::ota::DownloadRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReportUpdateStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReportUpdateStatus() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::ota::UpdateStatusRequest, ::ota::UpdateStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ReportUpdateStatus(context); }));
    }
    ~WithCallbackMethod_ReportUpdateStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportUpdateStatus(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ota::UpdateStatusResponse, ::ota::UpdateStatusRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::ota::UpdateStatusRequest, ::ota::UpdateStatusResponse>* ReportUpdateStatus(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_CheckForUpdates<WithCallbackMethod_DownloadUpdate<WithCallbackMethod_ReportUpdateStatus<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CheckForUpdates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckForUpdates() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CheckForUpdates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckForUpdates(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ota::UpdateCheckResponse, ::ota::UpdateCheckRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DownloadUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DownloadUpdate() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DownloadUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadUpdate(::grpc::ServerContext* /*context*/, const ::ota::DownloadRequest* /*request*/, ::grpc::ServerWriter< ::ota::DownloadResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReportUpdateStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReportUpdateStatus() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ReportUpdateStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportUpdateStatus(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ota::UpdateStatusResponse, ::ota::UpdateStatusRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckForUpdates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckForUpdates() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CheckForUpdates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckForUpdates(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ota::UpdateCheckResponse, ::ota::UpdateCheckRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckForUpdates(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DownloadUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DownloadUpdate() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DownloadUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadUpdate(::grpc::ServerContext* /*context*/, const ::ota::DownloadRequest* /*request*/, ::grpc::ServerWriter< ::ota::DownloadResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReportUpdateStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReportUpdateStatus() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ReportUpdateStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportUpdateStatus(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ota::UpdateStatusResponse, ::ota::UpdateStatusRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportUpdateStatus(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CheckForUpdates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CheckForUpdates() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->CheckForUpdates(context); }));
    }
    ~WithRawCallbackMethod_CheckForUpdates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckForUpdates(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ota::UpdateCheckResponse, ::ota::UpdateCheckRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* CheckForUpdates(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DownloadUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DownloadUpdate() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->DownloadUpdate(context, request); }));
    }
    ~WithRawCallbackMethod_DownloadUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadUpdate(::grpc::ServerContext* /*context*/, const ::ota::DownloadRequest* /*request*/, ::grpc::ServerWriter< ::ota::DownloadResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* DownloadUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReportUpdateStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReportUpdateStatus() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ReportUpdateStatus(context); }));
    }
    ~WithRawCallbackMethod_ReportUpdateStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportUpdateStatus(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ota::UpdateStatusResponse, ::ota::UpdateStatusRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* ReportUpdateStatus(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_DownloadUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_DownloadUpdate() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::ota::DownloadRequest, ::ota::DownloadResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::ota::DownloadRequest, ::ota::DownloadResponse>* streamer) {
                       return this->StreamedDownloadUpdate(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_DownloadUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DownloadUpdate(::grpc::ServerContext* /*context*/, const ::ota::DownloadRequest* /*request*/, ::grpc::ServerWriter< ::ota::DownloadResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedDownloadUpdate(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::ota::DownloadRequest,::ota::DownloadResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_DownloadUpdate<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_DownloadUpdate<Service > StreamedService;
};

}  // namespace ota


#endif  // GRPC_ota_5fservice_2eproto__INCLUDED
