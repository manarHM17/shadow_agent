// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ota_service.proto

#include "ota_service.pb.h"
#include "ota_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace ota {

static const char* OTAService_method_names[] = {
  "/ota.OTAService/CheckForUpdates",
  "/ota.OTAService/DownloadUpdate",
  "/ota.OTAService/ReportUpdateStatus",
};

std::unique_ptr< OTAService::Stub> OTAService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OTAService::Stub> stub(new OTAService::Stub(channel, options));
  return stub;
}

OTAService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CheckForUpdates_(OTAService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_DownloadUpdate_(OTAService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ReportUpdateStatus_(OTAService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::ota::UpdateCheckRequest, ::ota::UpdateCheckResponse>* OTAService::Stub::CheckForUpdatesRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::ota::UpdateCheckRequest, ::ota::UpdateCheckResponse>::Create(channel_.get(), rpcmethod_CheckForUpdates_, context);
}

void OTAService::Stub::async::CheckForUpdates(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::ota::UpdateCheckRequest,::ota::UpdateCheckResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::ota::UpdateCheckRequest,::ota::UpdateCheckResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_CheckForUpdates_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::ota::UpdateCheckRequest, ::ota::UpdateCheckResponse>* OTAService::Stub::AsyncCheckForUpdatesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::ota::UpdateCheckRequest, ::ota::UpdateCheckResponse>::Create(channel_.get(), cq, rpcmethod_CheckForUpdates_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::ota::UpdateCheckRequest, ::ota::UpdateCheckResponse>* OTAService::Stub::PrepareAsyncCheckForUpdatesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::ota::UpdateCheckRequest, ::ota::UpdateCheckResponse>::Create(channel_.get(), cq, rpcmethod_CheckForUpdates_, context, false, nullptr);
}

::grpc::ClientReader< ::ota::DownloadResponse>* OTAService::Stub::DownloadUpdateRaw(::grpc::ClientContext* context, const ::ota::DownloadRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::ota::DownloadResponse>::Create(channel_.get(), rpcmethod_DownloadUpdate_, context, request);
}

void OTAService::Stub::async::DownloadUpdate(::grpc::ClientContext* context, const ::ota::DownloadRequest* request, ::grpc::ClientReadReactor< ::ota::DownloadResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::ota::DownloadResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_DownloadUpdate_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ota::DownloadResponse>* OTAService::Stub::AsyncDownloadUpdateRaw(::grpc::ClientContext* context, const ::ota::DownloadRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ota::DownloadResponse>::Create(channel_.get(), cq, rpcmethod_DownloadUpdate_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ota::DownloadResponse>* OTAService::Stub::PrepareAsyncDownloadUpdateRaw(::grpc::ClientContext* context, const ::ota::DownloadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ota::DownloadResponse>::Create(channel_.get(), cq, rpcmethod_DownloadUpdate_, context, request, false, nullptr);
}

::grpc::ClientReaderWriter< ::ota::UpdateStatusRequest, ::ota::UpdateStatusResponse>* OTAService::Stub::ReportUpdateStatusRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::ota::UpdateStatusRequest, ::ota::UpdateStatusResponse>::Create(channel_.get(), rpcmethod_ReportUpdateStatus_, context);
}

void OTAService::Stub::async::ReportUpdateStatus(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::ota::UpdateStatusRequest,::ota::UpdateStatusResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::ota::UpdateStatusRequest,::ota::UpdateStatusResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ReportUpdateStatus_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::ota::UpdateStatusRequest, ::ota::UpdateStatusResponse>* OTAService::Stub::AsyncReportUpdateStatusRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::ota::UpdateStatusRequest, ::ota::UpdateStatusResponse>::Create(channel_.get(), cq, rpcmethod_ReportUpdateStatus_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::ota::UpdateStatusRequest, ::ota::UpdateStatusResponse>* OTAService::Stub::PrepareAsyncReportUpdateStatusRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::ota::UpdateStatusRequest, ::ota::UpdateStatusResponse>::Create(channel_.get(), cq, rpcmethod_ReportUpdateStatus_, context, false, nullptr);
}

OTAService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OTAService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< OTAService::Service, ::ota::UpdateCheckRequest, ::ota::UpdateCheckResponse>(
          [](OTAService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::ota::UpdateCheckResponse,
             ::ota::UpdateCheckRequest>* stream) {
               return service->CheckForUpdates(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OTAService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< OTAService::Service, ::ota::DownloadRequest, ::ota::DownloadResponse>(
          [](OTAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ota::DownloadRequest* req,
             ::grpc::ServerWriter<::ota::DownloadResponse>* writer) {
               return service->DownloadUpdate(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OTAService_method_names[2],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< OTAService::Service, ::ota::UpdateStatusRequest, ::ota::UpdateStatusResponse>(
          [](OTAService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::ota::UpdateStatusResponse,
             ::ota::UpdateStatusRequest>* stream) {
               return service->ReportUpdateStatus(ctx, stream);
             }, this)));
}

OTAService::Service::~Service() {
}

::grpc::Status OTAService::Service::CheckForUpdates(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::ota::UpdateCheckResponse, ::ota::UpdateCheckRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OTAService::Service::DownloadUpdate(::grpc::ServerContext* context, const ::ota::DownloadRequest* request, ::grpc::ServerWriter< ::ota::DownloadResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OTAService::Service::ReportUpdateStatus(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::ota::UpdateStatusResponse, ::ota::UpdateStatusRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ota

