// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: provision.proto

#include "provision.pb.h"
#include "provision.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace shadow_agent {

static const char* ProvisionService_method_names[] = {
  "/shadow_agent.ProvisionService/RegisterDevice",
  "/shadow_agent.ProvisionService/DeleteDevice",
  "/shadow_agent.ProvisionService/UpdateDevice",
  "/shadow_agent.ProvisionService/ListDevices",
  "/shadow_agent.ProvisionService/GetDevice",
};

std::unique_ptr< ProvisionService::Stub> ProvisionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ProvisionService::Stub> stub(new ProvisionService::Stub(channel, options));
  return stub;
}

ProvisionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RegisterDevice_(ProvisionService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteDevice_(ProvisionService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateDevice_(ProvisionService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListDevices_(ProvisionService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDevice_(ProvisionService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ProvisionService::Stub::RegisterDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo& request, ::shadow_agent::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::shadow_agent::DeviceInfo, ::shadow_agent::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterDevice_, context, request, response);
}

void ProvisionService::Stub::async::RegisterDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo* request, ::shadow_agent::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::shadow_agent::DeviceInfo, ::shadow_agent::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterDevice_, context, request, response, std::move(f));
}

void ProvisionService::Stub::async::RegisterDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo* request, ::shadow_agent::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::shadow_agent::Response>* ProvisionService::Stub::PrepareAsyncRegisterDeviceRaw(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::shadow_agent::Response, ::shadow_agent::DeviceInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::shadow_agent::Response>* ProvisionService::Stub::AsyncRegisterDeviceRaw(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProvisionService::Stub::DeleteDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceId& request, ::shadow_agent::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::shadow_agent::DeviceId, ::shadow_agent::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteDevice_, context, request, response);
}

void ProvisionService::Stub::async::DeleteDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceId* request, ::shadow_agent::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::shadow_agent::DeviceId, ::shadow_agent::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteDevice_, context, request, response, std::move(f));
}

void ProvisionService::Stub::async::DeleteDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceId* request, ::shadow_agent::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::shadow_agent::Response>* ProvisionService::Stub::PrepareAsyncDeleteDeviceRaw(::grpc::ClientContext* context, const ::shadow_agent::DeviceId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::shadow_agent::Response, ::shadow_agent::DeviceId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::shadow_agent::Response>* ProvisionService::Stub::AsyncDeleteDeviceRaw(::grpc::ClientContext* context, const ::shadow_agent::DeviceId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProvisionService::Stub::UpdateDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo& request, ::shadow_agent::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::shadow_agent::DeviceInfo, ::shadow_agent::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateDevice_, context, request, response);
}

void ProvisionService::Stub::async::UpdateDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo* request, ::shadow_agent::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::shadow_agent::DeviceInfo, ::shadow_agent::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateDevice_, context, request, response, std::move(f));
}

void ProvisionService::Stub::async::UpdateDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo* request, ::shadow_agent::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::shadow_agent::Response>* ProvisionService::Stub::PrepareAsyncUpdateDeviceRaw(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::shadow_agent::Response, ::shadow_agent::DeviceInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::shadow_agent::Response>* ProvisionService::Stub::AsyncUpdateDeviceRaw(::grpc::ClientContext* context, const ::shadow_agent::DeviceInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProvisionService::Stub::ListDevices(::grpc::ClientContext* context, const ::shadow_agent::Empty& request, ::shadow_agent::DeviceList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::shadow_agent::Empty, ::shadow_agent::DeviceList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListDevices_, context, request, response);
}

void ProvisionService::Stub::async::ListDevices(::grpc::ClientContext* context, const ::shadow_agent::Empty* request, ::shadow_agent::DeviceList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::shadow_agent::Empty, ::shadow_agent::DeviceList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListDevices_, context, request, response, std::move(f));
}

void ProvisionService::Stub::async::ListDevices(::grpc::ClientContext* context, const ::shadow_agent::Empty* request, ::shadow_agent::DeviceList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListDevices_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::shadow_agent::DeviceList>* ProvisionService::Stub::PrepareAsyncListDevicesRaw(::grpc::ClientContext* context, const ::shadow_agent::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::shadow_agent::DeviceList, ::shadow_agent::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListDevices_, context, request);
}

::grpc::ClientAsyncResponseReader< ::shadow_agent::DeviceList>* ProvisionService::Stub::AsyncListDevicesRaw(::grpc::ClientContext* context, const ::shadow_agent::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListDevicesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProvisionService::Stub::GetDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceId& request, ::shadow_agent::DeviceInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::shadow_agent::DeviceId, ::shadow_agent::DeviceInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDevice_, context, request, response);
}

void ProvisionService::Stub::async::GetDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceId* request, ::shadow_agent::DeviceInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::shadow_agent::DeviceId, ::shadow_agent::DeviceInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDevice_, context, request, response, std::move(f));
}

void ProvisionService::Stub::async::GetDevice(::grpc::ClientContext* context, const ::shadow_agent::DeviceId* request, ::shadow_agent::DeviceInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::shadow_agent::DeviceInfo>* ProvisionService::Stub::PrepareAsyncGetDeviceRaw(::grpc::ClientContext* context, const ::shadow_agent::DeviceId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::shadow_agent::DeviceInfo, ::shadow_agent::DeviceId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::shadow_agent::DeviceInfo>* ProvisionService::Stub::AsyncGetDeviceRaw(::grpc::ClientContext* context, const ::shadow_agent::DeviceId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

ProvisionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProvisionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProvisionService::Service, ::shadow_agent::DeviceInfo, ::shadow_agent::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProvisionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::shadow_agent::DeviceInfo* req,
             ::shadow_agent::Response* resp) {
               return service->RegisterDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProvisionService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProvisionService::Service, ::shadow_agent::DeviceId, ::shadow_agent::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProvisionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::shadow_agent::DeviceId* req,
             ::shadow_agent::Response* resp) {
               return service->DeleteDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProvisionService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProvisionService::Service, ::shadow_agent::DeviceInfo, ::shadow_agent::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProvisionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::shadow_agent::DeviceInfo* req,
             ::shadow_agent::Response* resp) {
               return service->UpdateDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProvisionService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProvisionService::Service, ::shadow_agent::Empty, ::shadow_agent::DeviceList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProvisionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::shadow_agent::Empty* req,
             ::shadow_agent::DeviceList* resp) {
               return service->ListDevices(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProvisionService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProvisionService::Service, ::shadow_agent::DeviceId, ::shadow_agent::DeviceInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProvisionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::shadow_agent::DeviceId* req,
             ::shadow_agent::DeviceInfo* resp) {
               return service->GetDevice(ctx, req, resp);
             }, this)));
}

ProvisionService::Service::~Service() {
}

::grpc::Status ProvisionService::Service::RegisterDevice(::grpc::ServerContext* context, const ::shadow_agent::DeviceInfo* request, ::shadow_agent::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProvisionService::Service::DeleteDevice(::grpc::ServerContext* context, const ::shadow_agent::DeviceId* request, ::shadow_agent::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProvisionService::Service::UpdateDevice(::grpc::ServerContext* context, const ::shadow_agent::DeviceInfo* request, ::shadow_agent::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProvisionService::Service::ListDevices(::grpc::ServerContext* context, const ::shadow_agent::Empty* request, ::shadow_agent::DeviceList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProvisionService::Service::GetDevice(::grpc::ServerContext* context, const ::shadow_agent::DeviceId* request, ::shadow_agent::DeviceInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace shadow_agent

